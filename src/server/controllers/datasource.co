fs         = require 'fs'
path       = require 'path'
exists     = fs.existsSync or path.existsSync

Seq        = require 'seq'
glob       = require 'glob'
yaml       = require 'js-yaml'

{_, op}          = require '../../util'
{readFilesAsync} = require '../files'
Controller       = require '../controller'


EXT_PAT          = /\.[^\.]*$/i
YAML_EXT_PAT     = /\.ya?ml$/i
YAML_OR_JSON_PAT = /\.(json|ya?ml)$/i


/**
 * @class Resource controller for graph requests.
 */
class DataSourceController extends Controller
    name    : 'datasources'
    dataDir : 'data/datasources'
    
    mapping :
        all : 'allData'
    
    -> super ...
    
    
    toFile: (id) -> "#{@dataDir}/#id.json"
    
    /**
     * Auto-load :id for related requests.
     */
    autoload: (id, cb) ->
        files   = findit.sync @dataDir
        pattern = new RegExp "#id\.(json|ya?ml)$", "i"
        file    = _.find files, -> pattern.test it
        
        unless file
            console.error "Unable to find DataSource for '#id'!"
            return cb new Error "Unable to find DataSource for '#id'!"
        
        if _.endsWith file, "#id.json"
            parser = JSON.parse
        if _.endsWith file, "#id.yaml"
            parser = yaml.load
        
        err, data <- fs.readFile file, 'utf8'
        if 'ENOENT' is err?.code
            console.error "Unable to find DataSource for '#id'!"
            return cb new Error "Unable to find DataSource for '#id'!"
        if err
            console.error "DataSourceController.autoload(#id, #{typeof cb}) -->\n", err
            return cb err
        try
            cb null, parser data
        catch err
            console.error "DataSourceController.autoload(#id, #{typeof cb}) -->\n", err
            cb err
    
    /**
     * GET /datasources
     * @returns {Object} JSON listing of the datasource metadata files.
     */
    index : (req, res, next) ->
        Seq()
            .seq glob, 'data/datasources/**/*.@(yaml|json)', {+nocase, +nosort}, Seq
            .filter -> YAML_OR_JSON_PAT.test it
            .map    -> "#it".replace YAML_EXT_PAT, '.json'
            .seq    -> res.send it
    
    /**
     * GET /datasources/:datasource
     */
    show: (req, res) ->
        res.send req.datasource
        # if req.format is 'json'
        #     res.send req.datasource
        # else
        #     res.render 'datasource/view'
    
    /**
     * Returns the aggregated JSON content of the datasource metadata files.
     */
    allData : (req, res, next) ->
        data = {}
        Seq()
            .seq glob, 'data/datasources/**/*.@(yaml|json)', {+nocase, +nosort}, Seq
            .seq (paths) -> readFilesAsync paths, this
            .seq (txts) -> @ok _.items txts
            .flatten false
            .parMap ([f, text]) ->
                # console.log "parsing file[#i]: '#f' -> text[#{text.length}]..."
                k = f.replace YAML_EXT_PAT, '.json'
                v = data[k] = {}
                try
                    if YAML_EXT_PAT.test f
                        v = data[k] = yaml.load text
                    else
                        v = data[k] = JSON.parse text
                    # console.log "#f ok!", data
                    @ok v
                catch err
                    console.error "[/datasources] catch! #err"
                    console.error err
                    console.error that if err.stack
                    res.send { error:String(err), partial_data:data }
            .seq -> res.send data
            .catch (err) ->
                console.error '[/datasources] catch!'
                console.error err
                console.error that if err.stack
                res.send { error:String(err), partial_data:data }
    


module.exports = exports = DataSourceController
