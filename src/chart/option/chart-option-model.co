{ _, op,
} = require '../../util'
{
    BaseModel, BaseList,
    Parsers, ParserMixin, ParsingModel, ParsingView,
}  = require '../../base'


/**
 * @class A set of tags.
 */
class exports.TagSet extends Array
    tags : {}
    
    (values=[]) ->
        @tags = {}
        @add values if values?.length
    
    has: (tag) ->
        @tags[tag]?
    
    get: (tag) ->
        return -1 unless tag
        unless @tags[tag]?
            @tags[tag] = @length
            @push tag
        @tags[tag]
    
    update: (tags) ->
        is_single = typeof tags is 'string'
        tags      = [tags] if is_single
        indices   = ( for tag of tags then @get tag )
        if is_single then indices[0] else indices
    
    toString: -> "TagSet(length=#{@length}, values=[\"#{@join '", "'}\"])"



/**
 * @namespace All known tags, for mapping consistently onto colors.
 */
KNOWN_TAGS = exports.KNOWN_TAGS = new TagSet()



/**
 * @class Field with chart-option-specific handling for validation, parsing, tags, etc.
 */
ChartOption = exports.ChartOption = ParsingModel.extend do # {{{
    IGNORED_TAGS : <[ callback deprecated debugging ]>
    valueAttribute : 'value'
    
    defaults: ->
        name     : ''
        type     : 'String'
        default  : null
        desc     : ''
        include  : 'diff'
        tags     : []
        examples : []
    
    
    
    constructor: function ChartOption
        ParsingModel ...
    
    initialize : ->
        # console.log "#this.initialize!"
        
        # Bind all the `parseXXX()` methods so they can be passed about independent from the class
        _.bindAll this, ...(_.functions this .filter -> _.startsWith(it, 'parse'))
        
        ChartOption.__super__.initialize ...
        @set 'id',    @id = _.camelize @get 'name'
        @set 'value', @get('default'), {+silent} if not @has 'value'
        
        
        # Notify Tag indexer of category when created, to ensure all category-tags
        # get indices with colors :P
        KNOWN_TAGS.update @getCategory()
        
        # Ignore functions/callbacks and, ahem, hidden tags.
        type = @get 'type' .toLowerCase() or ''
        tags = @get('tags') or []
        if _.str.include(type, 'function') or _.intersection(tags, @IGNORED_TAGS).length
            @set 'ignore', true
    
    
    
    ### Tag Handling
    
    # Wrapper to ensure @set('tags') is called, as tags.push()
    # will not trigger the 'changed:tags' event.
    addTag: (tag) ->
        return this unless tag
        tags = @get('tags') or []
        tags.push tag
        @set 'tags', tags
        this
    
    # Wrapper to ensure @set('tags') is called, as tags.push()
    # will not trigger the 'changed:tags' event.
    removeTag: (tag) ->
        return this unless tag
        tags = @get('tags') or []
        _.remove tags, tag
        @set 'tags', tags
        this
    
    # Keep tag list up to date
    onTagUpdate: ->
        KNOWN_TAGS.update @get 'tags'
        this
    
    getTagIndex: (tag) ->
        KNOWN_TAGS.get tag
    
    # A field's category is its first tag.
    getCategory: ->
        tags = (@get('tags') or [])[0]
    
    getCategoryIndex: ->
        @getTagIndex @getCategory()
    
    
    
    /* * * Value Accessors * * */
    
    getValue: (def) ->
        @getParser() @get @valueAttribute, def
    
    setValue: (v, options) ->
        def = @get 'default'
        if not v and def == null
            val = null
        else
            val = @getParser()(v)
        @set @valueAttribute, val, options
    
    clearValue: ->
        @set @valueAttribute, @get 'default'
    
    isDefault: ->
        @get(@valueAttribute) is @get 'default'
    
    
    
    /* * * Serialization * * */
    
    /**
     * Override to default `type` to the model attribute of the same name.
     * @returns {Function} Parser for the given type.
     */
    getParser: (type) ->
        type or= @get('type') or 'String'
        ChartOption.__super__.getParser.call this, type
    
    serializeValue: ->
        @serialize @getValue()
    
    toJSON: ->
        {id:@id} import do
            _.clone(@attributes) import { value:@getValue(), def:@get 'default' }
    
    toKVPairs: ->
        { "#{@id}":@serializeValue() }
    
    toString: -> "(#{@id}: #{@serializeValue()})"

# }}}



/**
 * @class List of ChartOption fields.
 */
ChartOptionList = exports.ChartOptionList = BaseList.extend do # {{{
    model : ChartOption
    
    
    constructor: function ChartOptionList
        BaseList ...
    
    
    /**
     * Collects a map of fields to their values, excluding those set to `null` or their default.
     * 
     * @param {Object} [opts={}] Options:
     * @param {Boolean} [opts.keepDefaults=true] If false, exclude pairs that
     *  haven't changed from their default value.
     * @param {Boolean} [opts.serialize=false] If true, replace each value
     *  with its String version by calling `value.serializeValue()`.
     * @returns {Object} Map of fields to their values.
     */
    values: (opts={}) ->
        opts = {+keepDefaults, -serialize} import opts
        _.synthesize do
            if opts.keepDefaults then @models else @models.filter -> not it.isDefault()
            -> [ it.get('name'), if opts.serialize then it.serializeValue() else it.getValue() ]
    
    toJSON: ->
        @values {+keepDefaults, -serialize}
    
    /**
     * Override to omit defaults from URL.
     */
    toKVPairs: ->
        _.collapseObject @values {-keepDefaults, +serialize}
    
    toKV: (item_delim='&', kv_delim='=') ->
        _.toKV @toKVPairs(), item_delim, kv_delim
    
    toURL: (item_delim='&', kv_delim='=') ->
        "?#{@toKV ...}"
    

# }}}

