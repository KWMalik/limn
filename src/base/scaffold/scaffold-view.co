_  = require 'limn/util/underscore'
op = require 'limn/util/op'
{ BaseView,
}  = require 'limn/base'
{ Field, FieldList,
}  = require 'limn/base/scaffold/scaffold-model'


FieldView = exports.FieldView = BaseView.extend do # {{{
    tagName   : 'div'
    className : 'field'
    
    type : 'string'
    
    events :
        'blur .value'   : 'onChange'
        'submit .value' : 'onChange'
    
    
    constructor: function FieldView
        BaseView ...
    
    initialize: ->
        # console.log "#this.initialize!"
        BaseView::initialize ...
        @type = @model.get 'type' .toLowerCase() or 'string'
    
    onChange: ->
        if @type is 'boolean'
            val = !! @$('.value').attr('checked')
        else
            val = @model.getParser() @$('.value').val()
        
        current = @model.getValue()
        return if _.isEqual val, current
        # console.log "#this.onChange( #current -> #val )"
        @model.setValue val, {+silent}
        @trigger 'change', this
    
    toTemplateLocals: ->
        json = FieldView.__super__.toTemplateLocals ...
        json.id or= _.camelize json.name
        json.value ?= ''
        json.value = JSON.stringify v if v = json.value and (_.isArray(v) or _.isPlainObject(v))
        json
    
    /**
     * A ghetto default template, typically overridden by superclass.
     */
    template: (locals) ->
        $ """
            <label class="name" for="#{locals.id}">#{locals.name}</label>
            <input class="value" type="text" id="#{locals.id}" name="#{locals.id}" value="#{locals.value}">
        """
    
    render: ->
        return @remove() if @model.get 'ignore'
        FieldView.__super__.render ...
    
# }}}


# There are several special options that, if passed, will be attached directly to the view:
#   model, collection, el, id, className, tagName, attributes

Scaffold = exports.Scaffold = BaseView.extend do # {{{
    __bind__       : <[ addField resetFields ]>
    tagName        : 'form'
    className      : 'scaffold'
    
    collectionType : FieldList
    subviewType    : FieldView
    
    
    
    constructor: function Scaffold
        BaseView ...
    
    initialize: ->
        CollectionType = @collectionType
        @model = (@collection or= new CollectionType)
        BaseView::initialize ...
        
        @collection.on 'add',   @addField, this
        @collection.on 'reset', @resetFields, this
    
    
    
    addField: (field) ->
        @removeSubview field.view if field.view
        
        # avoid duplicating event propagation
        field.off 'change:value', @onChange, this
        
        # propagate value-change events as key-value change events
        field.on 'change:value', @onChange, this
        
        SubviewType = @subviewType
        view = @addSubview new SubviewType model:field
        view.on 'change', @onChange.bind(this, field)
        
        @render()
        view
    
    resetFields: ->
        @removeAllSubviews()
        @collection.each @addField
        this
    
    onChange: (field) ->
        key   = field.get 'name'
        value = field.getValue()
        @trigger "change:#key", this, value, key, field
        @trigger "change",      this, value, key, field
        this
    
    

# Proxy collection methods
<[ get at pluck invoke values toJSON toKVPairs toKV toURL ]>
    .forEach (methodname) ->
        Scaffold::[methodname] = -> @collection[methodname].apply @collection, arguments

# }}}

