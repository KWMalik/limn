{ _, op,
} = require 'limn/util'
{ BaseModel, BaseList,
} = require 'limn/base/base-model'

Cascade = require 'limn/util/cascade'



/**
 * @class A model that implements cascading lookups for its attributes.
 */
CascadingModel = exports.CascadingModel = BaseModel.extend do # {{{
    /**
     * The lookup cascade.
     * @type Cascade
     */
    cascade : null
    
    
    constructor: function CascadingModel (attributes={}, opts)
        @cascade = new Cascade attributes
        BaseModel.call this, attributes, opts
    
    initialize: ->
        BaseModel::initialize ...
    
    
    /**
     * Recursively look up a (potenitally nested) attribute in the lookup chain.
     * @param {String} key Attribute key (potenitally nested using dot-delimited subkeys).
     * @returns {*}
     */
    get: (key) ->
        @cascade.get key
    
    
    toJSON: (opts={}) ->
        opts = {-collapseCascade, ...opts}
        if opts.collapseCascade
            @cascade.collapse()
        else
            BaseModel::toJSON ...
    


# Proxy Cascade methods
<[
    addLookup removeLookup popLookup shiftLookup unshiftLookup
    isOwnProperty isOwnValue isInheritedValue isModifiedValue
]>.forEach (methodname) ->
    CascadingModel::[methodname] = -> @cascade[methodname].apply @cascade, arguments

# }}}



