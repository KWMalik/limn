_  = require 'limn/util/underscore'
op = require 'limn/util/op'
{ BaseModel, BaseList, BaseView, Mixin,
}  = require 'limn/base'


/**
 * @namespace Parsers by type.
 */
Parsers = exports.Parsers =
    
    parseBoolean: (v) ->
        op.toBool v
    
    parseInteger: (v) ->
        r = op.toInt v
        unless isNaN r then r else null
    
    parseFloat: (v) ->
        r = op.toFloat v
        unless isNaN r then r else null
    
    parseString: (v) ->
        if v? then op.toStr v else null
    
    parseDate: (v) ->
        if v then op.toDate v else null
    
    parseRegExp: (v) ->
        if v then op.toRegExp v else null
    
    parseArray: (v) ->
        if v then op.toObject v else null
    
    parseObject: (v) ->
        if v then op.toObject v else null
    
    parseFunction: (v) ->
        if v and _.startswith String(v), 'function'
            try eval "(#v)" catch err then null
        else
            null
    

# Aliases
Parsers.parseNumber = Parsers.parseFloat


/**
 * @class Methods for a class to select parsers by type reflection.
 * @mixin
 */
class exports.ParserMixin extends Mixin
    this:: import Parsers
    
    (target) ->
        return Mixin.call ParserMixin, target
    
    
    # XXX: So I'm meh about mixing in the Parsers dictionary.
    # 
    # - Pros: mixing in `parseXXX()` methods makes it easy to
    #   override in the target class.
    # - Cons: `parse()` is a Backbone method, which bit me once
    #   already (hence `parseValue()`), so conflicts aren't unlikely.
    # 
    # Other ideas:
    # - Parsers live at `@__parsers__`, and each instance gets its own clone
    # -> Parser lookup uses a Cascade from the object. (Why not just use prototype, tho?)
    
    parseValue: (v, type) ->
        @getParser(type)(v)
    
    getParser: (type='String') ->
        # If this is a known type and we have a parser for it, return that
        fn = @["parse#type"]
        return fn if typeof fn is 'function'
        
        # Handle compound/optional types
        # XXX: handle 'or' by returning an array of parsers?
        type = _ String(type).toLowerCase()
        for t of <[ Integer Float Number Boolean Object Array Function ]>
            if type.startsWith t.toLowerCase()
                return @["parse#t"]
        @defaultParser or @parseString
    
    getParserFromExample: (v) ->
        return null unless v?
        type = typeof v
        
        if type is not 'object'
            @getParser type
        else if _.isArray v
            @getParser 'Array'
        else
            @getParser 'Object'
    



/**
 * @class Basic model which mixes in the ParserMixin.
 * @extends BaseModel
 * @borrows ParserMixin
 */
ParsingModel = exports.ParsingModel = BaseModel.extend ParserMixin.mix do
    constructor: function ParsingModel then BaseModel ...


/**
 * @class Basic collection which mixes in the ParserMixin.
 * @extends BaseList
 * @borrows ParserMixin
 */
ParsingList = exports.ParsingList = BaseList.extend ParserMixin.mix do
    constructor: function ParsingList then BaseList ...


/**
 * @class Basic view which mixes in the ParserMixin.
 * @extends BaseView
 * @borrows ParserMixin
 */
ParsingView = exports.ParsingView = BaseView.extend ParserMixin.mix do
    constructor: function ParsingView then BaseView ...


