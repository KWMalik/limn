Base = require 'limn/base/base'


/**
 * @class An EventEmitter with a ratchet-up waiting counter.
 * @extends Base
 */
class WaitingEmitter extends Base
    
    /**
     * Count of outstanding tasks.
     * @type Number
     */
    waitingOn : 0
    
    
    /**
     * Increment the waiting task counter.
     * @returns {this}
     */
    wait: ->
        count = @waitingOn
        @waitingOn += 1
        # console.log "#this.wait! #count --> #{@waitingOn}"
        # console.trace()
        @trigger('start-waiting', this) if count is 0 and @waitingOn > 0
        this
    
    /**
     * Decrement the waiting task counter.
     * @returns {this}
     */
    unwait: ->
        count = @waitingOn
        @waitingOn -= 1
        # console.warn "#this.unwait! #{@waitingOn} < 0" if @waitingOn < 0
        # console.log "#this.unwait! #count --> #{@waitingOn}"
        # console.trace()
        @trigger('stop-waiting', this) if @waitingOn is 0 and count > 0
        this
    
    /**
     * @param {Function} fn Function to wrap.
     * @returns {Function} A function wrapping the passed function with a call
     *  to `unwait()`, then delegating with current context and arguments.
     */
    unwaitAnd: (fn) ->
        self = this
        ->
            # console.log "#self.unwaitAnd( function #{fn.name or fn.displayName}() )"
            # console.trace()
            self.unwait(); fn ...
    

module.exports = exports = WaitingEmitter
