assert  = require 'assert'

_       = require 'kraken/util/underscore'
Cascade = require 'kraken/util/cascade'

assertArraysEqual = (actual, expected, name) ->
    assert.deepEqual actual, expected
    assert.ok _.isArray(actual), "_.isArray #name = #actual"
    assert.equal actual?.length, expected.length, "#name.length"

assertEqual = (actual, expected, msg) ->
    assert.equal actual, expected, "#msg:\t Expected: #expected;\tGot: #actual"

exports.basicCascade = ->
    a = { a:1 }
    b = { b:2 }
    c = { c:3 }
    
    c1 = new Cascade
    assertEqual c1.get('a'), void,  "[c1] Primary data lookup before set"
    c1.set 'a', 1
    assertEqual c1.get('a'), 1,     "[c1] Primary data lookup (after set)"
    assertEqual c1.get('b'), void,  "[c1] Cascade lookup (depth=1, before set)"
    c1.addLookup b
    assertEqual c1.get('a'), 1,     "[c1] Primary data lookup (after lookup added)"
    assertEqual c1.get('b'), 2,     "[c1] Cascade lookup (depth=1, first)"
    assertEqual c1.get('c'), void,  "[c1] Cascade lookup (depth=2, unset)"
    c1.addLookup c
    assert.ok c1.has('a'),          "[c1] Cascade has 'a' key (depth=0)"
    assert.ok c1.has('b'),          "[c1] Cascade has 'b' key (depth=1)"
    assert.ok c1.has('c'),          "[c1] Cascade has 'c' key (depth=2)"
    assertEqual c1.get('a'), 1,     "[c1] Primary data lookup (after lookup #2 added)"
    assertEqual c1.get('b'), 2,     "[c1] Cascade lookup (depth=1, second)"
    assertEqual c1.get('c'), 3,     "[c1] Cascade lookup (depth=2, first)"
    c1.removeLookup b
    assertEqual c1.get('a'), 1,     "[c1] Primary data lookup (after lookup b removed)"
    assertEqual c1.get('b'), void,  "[c1] Cascade lookup (depth=1, third)"
    assertEqual c1.get('c'), 3,     "[c1] Cascade lookup (depth=2, removed)"
    c1.removeLookup c
    assertEqual c1.get('a'), 1,     "[c1] Primary data lookup (after lookup c removed)"
    assertEqual c1.get('b'), void,  "[c1] Cascade lookup (depth=1, removed)"
    c1.unset 'a'
    assertEqual c1.get('a'), void,  "[c1] Primary data lookup (after removed)"
    
    c2 = new Cascade a, [b, c]
    assert.notStrictEqual c1, c2,   "[c2] Different Cascades should differ"
    
    assert.ok c2.has('a'),          "[c2] Cascade has 'a' key (depth=0)"
    assert.ok c2.has('b'),          "[c2] Cascade has 'b' key (depth=1)"
    assert.ok c2.has('c'),          "[c2] Cascade has 'c' key (depth=2)"
    assertEqual c2.get('a'), 1,     "[c2] Primary data lookup"
    assertEqual c2.get('b'), 2,     "[c2] Cascade lookup (depth=1, first)"
    assertEqual c2.get('c'), 3,     "[c2] Cascade lookup (depth=2, first)"
    c2.removeLookup b
    assertEqual c2.get('a'), 1,     "[c2] Primary data lookup (after lookup b removed)"
    assertEqual c2.get('b'), void,  "[c2] Cascade lookup (depth=1, second)"
    assertEqual c2.get('c'), 3,     "[c2] Cascade lookup (depth=2, removed)"
    c2.removeLookup c
    assertEqual c2.get('a'), 1,     "[c2] Primary data lookup (after lookup c removed)"
    assertEqual c2.get('b'), void,  "[c2] Cascade lookup (depth=1, removed)"
    c2.unset 'a'
    assertEqual c2.get('a'), void,  "[c2] Primary data lookup (after removed)"


exports.nestedKeys = ->
    o = {}
    a =
        lol: 'cats'
        hat: false
        foo: bar:1
    b =
        lol: 'clowns'
        hat: fez:true
        rat: drat:2, spat:2
        baz: feh:2
        bats: 13
    
    c = new Cascade o, [a, b]
    
    assertEqual c.get('lol'),       'cats',     "Shadow  c.get('lol')"
    assertEqual c.get('bats'),      13,         "Simple cascade  c.get('bats')"
    assertEqual c.get('foo.bar'),   1,          "Nested  c.get('foo.bar')"
    assertEqual c.get('baz.feh'),   2,          "Nested cascade  c.get('bar.feh')"
    
    assertEqual c.get('hat'),       false,      "Shadow non-cascade  c.get('hat')"
    assertEqual c.get('hat.fez'),   true,       "Unshadow due to cascade  c.get('hat.fez')"
    
    c.set 'hat.fez', 'red'
    assertEqual c.get('hat.fez'),   'red',      "After nested set  c.get('hat.fez')"
    assertEqual o.hat?.fez,         'red',      "After nested set  o.hat?.fez"
    assertEqual b.hat?.fez,         true,       "After nested set  b.hat?.fez"
    
    c.inherit 'hat.fez'
    assertEqual c.get('hat.fez'),   true,       "After inherit  c.get('hat.fez')"
    assertEqual o.hat?.fez,         void,       "After inherit  o.hat?.fez"
    
    c.unset 'hat.fez'
    assertEqual c.get('hat.fez'),   void,       "After unset  c.get('hat.fez')"
    assertEqual o.hat?.fez,         void,       "After unset  o.hat?.fez"
    assertEqual c.hasTombstone('hat.fez'), true, "After unset  c.hasTombstone('hat.fez')"
    assertEqual b.hat?.fez,         true,       "After unset  b.hat?.fez"
    
    c.set 'rat.drat', 1
    assertEqual c.get('rat.drat'),  1,          "Shadow nested  c.get('rat.drat')"
    assertEqual c.get('rat.spat'),  2,          "Cascade nested  c.get('rat.spat')"
    c.inherit 'rat'
    assertEqual c.get('rat.drat'),  2,          "After inherit  c.get('rat.drat')"
    assertEqual c.get('rat.spat'),  2,          "After inherit  c.get('rat.spat')"
    c.unset 'rat'
    assertEqual c.get('rat.drat'),  void,       "After unset  c.get('rat.drat')"
    assertEqual c.get('rat.spat'),  void,       "After unset  c.get('rat.spat')"
    assertEqual c.hasTombstone('rat.drat'), true, "After unset  c.hasTombstone('rat.drat')"
    assertEqual c.hasTombstone('rat.spat'), true, "After unset  c.hasTombstone('rat.spat')"
    assertEqual c.hasTombstone('rat'),      true, "After unset  c.hasTombstone('rat')"




