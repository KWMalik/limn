{ _, op,
} = require 'kraken/util'

Backbone = require 'backbone'



/**
 * @class Base model, extending Backbone.Model, used by scaffold and others.
 * @extends Backbone.Model
 */
BaseModel = exports.BaseModel = Backbone.Model.extend do # {{{
    ctorName : 'BaseModel'
    
    # A list of method-names to bind on initialize; set this on a subclass to override.
    __bind__ : []
    
    
    
    constructor : function BaseModel
        @__class__      = @constructor
        @__superclass__ = @..__super__.constructor
        Backbone.Model ...
        @trigger 'create', this
    
    initialize: ->
        _.bindAll this, ...@__bind__ if @__bind__.length
    
    
    ### Accessors
    
    has: (key) ->
        @get(key)?
    
    get: (key) ->
        _.getNested @attributes, key
    
    # set: (key, value, opts) ->
    #     if _.isObject(key) and key?
    #         [values, opts] = [key, value]
    #     else
    #         values = { "#key": value }
    #     
    #     # TODO: Validation
    #     @_changed or= {}
    #     
    #     for key, value in values
    #         if _.str.contains key, '.'
    #             _.setNested @attributes, key, value, opts
    #         else
    #             Backbone.Model::set.call this, key, value, opts
    #     
    #     this
    # 
    # unset : (key, opts) ->
    #     
    
    
    ### Serialization
    
    serialize: (v) ->
        # if v!?
        #     v = ''
        if _.isBoolean v
            v =  Number v
        else if _.isObject v
            v = JSON.stringify v
        String v
    
    /**
     * Like `.toJSON()` in that it should return a plain object with no functions,
     * but for the purpose of `.toKV()`, allowing you to customize the values
     * included and keys used.
     * @returns {Object}
     */
    toKVPairs: ->
        kvo = _.collapseObject @toJSON()
        if v and _.isObject v
            for k, v in kvo
                kvo[k] = @serialize v unless typeof v is 'function'
        else
            @serialize v
        kvo
    
    /**
     * Serialize the model into a `www-form-encoded` string suitable for use as
     * a query string or a POST body.
     * @returns {String}
     */
    toKV: (item_delim='&', kv_delim='=') ->
        _.toKV @toKVPairs(), item_delim, kv_delim
    
    /**
     * @returns {String} URL identifying this model.
     */
    toURL: ->
        "?#{@toKV ...}"
    
    toString: -> "#{@ctorName}(id=#{@id})"


# Class Methods
BaseModel import do
    
    /**
     * Factory method which constructs an instance of this model from a string of KV-pairs.
     * This is a class method inherited by models which extend {BaseModel}.
     * @static
     * @param {String|Object} o Serialized KV-pairs (or a plain object).
     * @returns {BaseModel} An instance of this model.
     */
    fromKV: (o, item_delim='&', kv_delim='=') ->
        o   = _.fromKV o, item_delim, kv_delim if typeof o is 'string'
        Cls = if typeof this is 'function' then this else this.constructor
        new Cls _.uncollapseObject o

# }}}

/**
 * @class Base collection, extending Backbone.Collection, used by scaffold and others.
 * @extends Backbone.Collection
 */
BaseList = exports.BaseList = Backbone.Collection.extend do # {{{
    ctorName : 'BaseList'
    
    # A list of method-names to bind on initialize; set this on a subclass to override.
    __bind__ : []
    
    
    
    constructor : function BaseList
        @__class__      = @constructor
        @__superclass__ = @..__super__.constructor
        Backbone.Collection ...
        @trigger 'create', this
    
    initialize : ->
        _.bindAll this, ...@__bind__ if @__bind__.length
    
    
    toKVPairs: ->
        _.collapseObject @toJSON()
    
    toKV: (item_delim='&', kv_delim='=') ->
        _.toKV @toKVPairs(), item_delim, kv_delim
    
    toURL: (item_delim='&', kv_delim='=') ->
        "?#{@toKV ...}"
    
    toString: -> "#{@ctorName}(length=#{@length})"
# }}}


/**
 * @class Base view, extending Backbone.View, used by scaffold and others.
 * @extends Backbone.View
 */
BaseView = exports.BaseView = Backbone.View.extend do # {{{
    ctorName : 'BaseView'
    
    /**
     * A list of method-names to bind on initialize; set this on a subclass to override.
     * @type Array<String>
     */
    __bind__ : []
    
    /**
     * @type Array<BaseView>
     */
    subviews : []
    
    
    
    constructor : function BaseView
        @__class__      = @constructor
        @__superclass__ = @..__super__.constructor
        @subviews       = []
        Backbone.View ...
        @trigger 'create', this
    
    initialize: ->
        _.bindAll this, ...@__bind__ if @__bind__.length
        
        @setModel @model
        @build()
    
    setModel: (model) ->
        if @model
            @model.off 'change',  @render, this
            @model.off 'destroy', @remove, this
            delete @model.view
            data = @$el.data()
            delete data.model
            delete data.view
        if @model = model
            @model.view = this
            @$el.data { @model, view:this }
            @model.on 'change',  @render, this
            @model.on 'destroy', @remove, this
        @model
    
    toTemplateLocals: ->
        json = {value:v} = @model.toJSON()
        if _.isArray(v) or _.isObject(v)
            json.value = JSON.stringify v
        { $, _, op, @model, view:this } import json
    
    $template: (locals={}) ->
        $ @template @toTemplateLocals() import locals
    
    build: ->
        return this unless @template
        
        outer = @$template()
        @$el.html outer.html()
            .attr do
                id    : outer.attr 'id'
                class : outer.attr('class')
        
        this
    
    render: ->
        @build()
        @trigger 'render', this
        this
    
    hide   : -> @$el.hide();      this
    show   : -> @$el.show();      this
    remove : -> @$el.remove();    this
    clear  : -> @model.destroy(); @remove()
    
    
    # remove : ->
    #     if (p = @$el.parent()).length
    #         @$parent or= p
    #         # @parent_index = p.children().indexOf @$el
    #     @$el.remove()
    #     this
    # 
    # reparent : (parent=@$parent) ->
    #     parent = $ parent
    #     @$el.appendTo parent if parent?.length
    #     this
    
    toString : -> "#{@ctorName}(model=#{@model})"


# Proxy model methods
<[ get set unset toJSON toKV toURL ]>
    .forEach (methodname) ->
        BaseView::[methodname] = -> @model[methodname].apply @model, arguments

# }}}

