_  = require 'kraken/underscore'
op = require 'kraken/util/op'


BaseModel = exports.BaseModel = Backbone.Model.extend do # {{{
    ctorName : 'BaseModel'
    # List of methods to bind on initialize; set on subclass
    __bind__ : []
    
    idAttribute    : 'id'
    valueAttribute : 'value'
    
    
    initialize: ->
        _.bindAll this, ...@__bind__ if @__bind__.length
        @__super__ = @constructor.__super__
    
    
    toKVPairs: (kv_delimiter='=') ->
        idAttr  = @idAttribute or 'id'
        key     = @[idAttr] or @get idAttr
        valAttr = @valueAttribute or 'value'
        value   = @get 'value'
        if key and value?
            "#{encodeURIComponent key}#kv_delimiter#{encodeURIComponent value}"
        else
            ''
    
    toString: -> "#{@ctorName}(id=#{@id}, value=#{@get 'value'})"


# Class Methods
BaseModel import do
    
    fromKVPairs: (o) ->
        o   = _.fromKVPairs o if typeof o is 'string'
        Cls = if typeof this is 'function' then this else this.constructor
        new Cls o

# }}}


/**
 * @class Base View, used by scaffold and others.
 */
BaseView = exports.BaseView = Backbone.View.extend do # {{{
    ctorName : 'BaseView'
    
    # List of methods to bind on initialize; set on subclass
    __bind__ : []
    
    
    
    initialize: ->
        _.bindAll this, ...@__bind__ if @__bind__.length
        @__super__ = @constructor.__super__
        
        @model.view = this
        @$el.data { @model, view:this }
        @model.on 'change',  @render, this
        @model.on 'destroy', @remove, this
    
    toTemplateLocals: ->
        json = {value:v} = @model.toJSON()
        if _.isArray(v) or _.isObject(v)
            json.value = JSON.stringify v
        { $, _, op, @model, view:this } import json
    
    $template: (locals={}) ->
        $ @template @toTemplateLocals() import locals
    
    build: ->
        return this unless @template
        
        outer = @$template()
        @$el.html outer.html()
            .attr do
                id    : outer.attr 'id'
                class : outer.attr('class')
        
        this
    
    render: ->
        @build()
        @trigger 'render', this
        this
    
    hide   : -> @$el.hide();      this
    show   : -> @$el.show();      this
    remove : -> @$el.remove();    this
    clear  : -> @model.destroy(); @remove()
    
    
    # remove : ->
    #     if (p = @$el.parent()).length
    #         @$parent or= p
    #         # @parent_index = p.children().indexOf @$el
    #     @$el.remove()
    #     this
    # 
    # reparent : (parent=@$parent) ->
    #     parent = $ parent
    #     @$el.appendTo parent if parent?.length
    #     this
    
    toString : -> "#{@ctorName}(model=#{@model})"


# }}}


