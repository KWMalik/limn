# Utilities for use in templates

# maybe!
exports.require = require

fs   = exports.fs   = require 'fs'
path = exports.path = require 'path'
              
_    = exports._    = require 'underscore'
_.str = require 'underscore.string'
_.mixin _.str.exports()

yaml = exports.yaml = require 'js-yaml'
jade = exports.jade = require 'jade'
              
exports.env = process.env
NODE_ENV = (process.env.NODE_ENV or 'dev').toLowerCase()
IS_PROD  = exports.IS_PROD  = _ NODE_ENV .startsWith 'prod'
IS_TEST  = exports.IS_TEST  = _ NODE_ENV .startsWith 'test'
IS_DEV   = exports.IS_DEV   = not (IS_PROD or IS_TEST) # _.startsWith NODE_ENV, 'dev'
# Canonicalize
NODE_ENV = exports.NODE_ENV = if IS_PROD then 'prod' else if IS_TEST then 'test' else 'dev'


sources = exports.sources = (modulesFile, node_env=NODE_ENV) ->
    mods = yaml.load fs.readFileSync modulesFile, 'utf8'
    modlist = (mods.all or []) .concat (mods[node_env] or [])
    _.flatten modlist.map ({suffix or '', paths}) -> joinTree('', paths).map -> it+suffix


joinTree = exports.joinTree = function joinTree(root, tree)
    return ["#root/#tree"] if typeof tree is 'string'
    _ tree .reduce do
        (acc, branch) ->
            if typeof branch is 'string'
                acc.push "#root/#branch"
            else
                _.each branch, (v, k) ->
                    acc.push.apply acc, joinTree "#root/#k", v
            acc
        []


# util = exports.util = require '../util'

