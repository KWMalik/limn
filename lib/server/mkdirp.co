fs = require 'fs'
path = require 'path'



expand = exports.expand = (...parts) ->
    p = path.normalize path.join ...parts
    if p.indexOf('~') is 0
        home = process.env.HOME or process.env.HOMEPATH
        p = path.join home, p.slice(1)
    path.resolve p


# Recursively make missing directories, eating EEXIST errors.
mkdirpAsync = exports.mkdirpAsync = function mkdirpAsync (p, mode=8r0755, cb)
    [cb, mode] = [mode, 8r0755] if typeof mode is 'function'
    cb or= (->)
    p = expand(p)
    
    exists <- path.exists p
    return cb null if exists
    
    ps = p.split '/'
    _p = ps.slice(0, -1).join '/'
    
    err <- mkdirpAsync _p, mode
    return cb null if err?.code is 'EEXIST'
    return cb err  if err
    
    err <- fs.mkdir _p
    return cb null if err?.code is 'EEXIST'
    return cb err  if err


# Recursively make missing directories, eating EEXIST errors.
mkdirp = exports.mkdirp = \
mkdirpSync = exports.mkdirpSync = (p, mode=8r0755) ->
    made_any = false
    _p = ''
    for part of expand(p).slice(1).split('/')
        _p += '/' + part
        continue if path.existsSync _p
        made_any = true
        fs.mkdirSync _p, mode
    made_any

