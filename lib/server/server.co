#!/usr/bin/env coco

fs      = require 'fs'
path    = require 'path'

{exec, spawn,
} = require 'child_process'
exists = fs.existsSync or path.existsSync


express = require 'express'
LimnMiddleware = require './middleware'


app = exports = module.exports = express.createServer()

/**
 * Handle webhook notification to pull from origin.
 */
app.all '/webhook/post-update', (req, res) ->

    # exec the pull async...
    cmd = 'git pull origin master'
    console.log "[/webhook/post-update] $ #cmd"
    child = exec cmd, (err, stdout, stderr) ->
        res.contentType '.txt'
        console.log '[/webhook/post-update]  ', stdout
        console.log '[/webhook/post-update]  ', stderr
        if err
            console.error '[/webhook/post-update] ERROR!', err
            res.send "$ #cmd\n\n#stdout\n\n#stderr\n\nERROR! #err", 503
        else
            res.send "$ #cmd\n\n#stdout\n\n#stderr", 200

/**
 * Load Limn middleware
 */
app.use limn = app.limn = LimnMiddleware()



mainfile = path.basename require.main?.filename
if require.main is module or 'Cokefile' is mainfile
    PORT = 8081
    PORT = parseInt(that, 10) if process.env.KRAKEN_PORT
    
    NODE_ENV  = process.env.NODE_ENV or 'development'
    
    REV = process.env.KRAKEN_REV or 'HEAD'
    try REV = require '../version' catch e
    err, stdout, stderr <- exec 'git rev-parse --short HEAD', {cwd:process.cwd(), env:process.env}
    throw err if err
    REV = stdout.trim! unless REV
    
    console.log s = "Kraken Server (port=#PORT, env=#NODE_ENV, rev=#REV, base_dir=#{limn.BASE})"
    console.log '=' * s.length
    app.listen PORT

