#!/usr/bin/env coco

fs       = require 'fs'
path     = require 'path'
{exec, spawn} = require 'child_process'

_        = require 'underscore'
mime     = require 'mime'
express  = require 'express'
compiler = require 'connect-compiler-extras'



### Config

PORT = 8081

CWD    = process.cwd()
WWW    = "#CWD/www"
VAR    = "#CWD/var"
STATIC = "#CWD/static"

NODE_ENV  = process.env.NODE_ENV or 'development'
LOG_LEVEL = if NODE_ENV is 'development' then 'INFO' else 'WARN'


VERSION = 'dev'
err, stdout, stderr <- exec 'git rev-parse --short HEAD', {cwd:CWD, env:process.env}
throw err if err
VERSION = stdout.trim!

# err <- fs.writeFile 'lib/version.js', "module.exports = exports = '#{VERSION}';\n", 'utf8'
# try VERSION = require '../version' catch e


### Setup

app = express.createServer()

app.start = ->
    console.log "starting Kraken dev server (port=#PORT, env=#NODE_ENV, version=#VERSION)"
    console.log "========================================================================"
    app.listen PORT

app.configure ->
    mime.define 'text/plain' : <[ jade co styl stylus ]>
    
    app.set 'views', WWW
    app.set 'view engine', 'jade'
    app.set 'view options', {
        layout  : false
        pretty  : true
        version : VERSION
        WWW     : WWW
        VAR     : VAR
        STATIC  : STATIC
    } import require './view-helpers'
    
    app.use express.logger() if LOG_LEVEL is 'DEBUG'
    app.use express.bodyParser()
    app.use express.methodOverride()
    
    app.use compiler do
        src     : WWW
        dest    : VAR
        enabled : <[ stylus coco pyyaml ]>
        options : stylus : { nib:true, include:"#WWW/css" }
        log_level : LOG_LEVEL
    
    # wrap modules in commonjs closure for browser
    app.use compiler do
        enabled : 'commonjs'
        src     : [ VAR, WWW, STATIC ]
        dest    : VAR
        options : commonjs : drop_path_parts:1
        log_level : LOG_LEVEL
    
    app.use require('browserify') do
        mount   : '/vendor/browserify.js'
        require : <[ events seq ]>
    
    app.use express.static WWW
    app.use express.static VAR
    app.use express.static STATIC
    
    app.use app.router
    
    app.use express.errorHandler do
        dumpExceptions : true
        showStack      : true


### Routes

app.get '/', (req, res) ->
    res.render 'graph'

app.get '/:page', (req, res) ->
    res.render req.params.page



exports import {
    CWD, WWW, VAR, STATIC,
    PORT, LOG_LEVEL, NODE_ENV, VERSION,
    app, module, require,
}


mainfile = path.basename require.main?.filename
if require.main is module or 'Cokefile' is mainfile
    app.start()

