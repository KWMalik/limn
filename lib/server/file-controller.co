fs         = require 'fs'
path       = require 'path'
{existsSync:exists} = path

_          = require 'underscore'
Seq        = require 'seq'
yaml       = require 'js-yaml'
{mkdirp, mkdirpAsync} = require './mkdirp'

{ readJSONFilesAsync,
} = require './files'

Controller = require './controller'


/**
 * @class Resource controller backed by flat json or yaml files.
 */
class FileBackedController extends Controller
    
    name    : null
    dataDir : null
    
    ->
        @dataDir or= "data/#{@name}"
        super ...
    
    
    
    /**
     * Override to customize lookup of files by ID.
     * 
     * @param {String} id ID of this resource.
     * @returns {String} Path to file for this resource.
     */
    toFile: (id) -> "#{@dataDir}/#id.json"
    
    
    /**
     * Auto-load :id for related requests.
     * 
     * @param {String} id ID of the resource.
     * @param {Function} cb Callback to invoke with the loaded object.
     */
    autoload: (id, cb) ->
        file = @toFile id
        parser = JSON.parse
        
        yamlFile = file.replace /\.json$/i, '.yaml'
        if exists yamlFile
            file = yamlFile
            parser = yaml.load
        
        err, data <- fs.readFile file, 'utf8'
        
        if 'ENOENT' is err?.code
            return cb null, {}
        if err
            console.error "#{this}.autoload(#id, #{typeof cb}) -->\nerr"
            return cb err
        try
            cb null, parser data
        catch err
            console.error "#{this}.autoload(#id, #{typeof cb}) -->\nerr"
            cb err
    
    ### Helpers
    
    processBody: (req, res) ->
        if not req.body
            res.send {result:"error", message:"Data required!"}, 501
            return false
        
        data = req.body
        data.slug or= data.id
        data.id or= data.slug
        
        if not data.slug
            res.send {result:"error", message:"Slug required!"}, 501
            return false
        
        mkdirp @dataDir if not exists @dataDir
        return data
    
    errorHandler: (res, msg) ->
        (err) ->
            if err
                msg or= err.message or String(err)
                console.error msg
                res.send { result:"error", message:msg }, 501
            else
                res.send { result:"ok" }


module.exports = exports = FileBackedController
