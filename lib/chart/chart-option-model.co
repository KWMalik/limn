_ = require 'kraken/util/underscore'
{ Field, FieldList, FieldView, Scaffold,
} = require 'kraken/scaffold'


/**
 * @class A set of tags.
 */
class exports.TagSet extends Array
    tags : {}
    
    (values=[]) ->
        @tags = {}
        @add values if values?.length
    
    has: (tag) ->
        @tags[tag]?
    
    get: (tag) ->
        return -1 unless tag
        unless @tags[tag]?
            @tags[tag] = @length
            @push tag
        @tags[tag]
    
    update: (tags) ->
        is_single = typeof tags is 'string'
        tags      = [tags] if is_single
        indices   = ( for tag of tags then @get tag )
        if is_single then indices[0] else indices
    
    toString: -> "TagSet(length=#{@length}, values=[\"#{@join '", "'}\"])"



/**
 * @namespace All known tags, for mapping consistently onto colors.
 */
KNOWN_TAGS = exports.KNOWN_TAGS = new TagSet()



/**
 * @class Field with chart-option-specific handling for validation, parsing, tags, etc.
 */
ChartOption = exports.ChartOption = Field.extend do # {{{
    ctorName : 'ChartOption'
    IGNORED_TAGS : <[ callback deprecated debugging ]>
    
    
    constructor: function ChartOption
        Field ...
    
    initialize : ->
        # console.log "#this.initialize!"
        Field::initialize ...
        
        # Notify Tag indexer of category when created, to ensure all category-tags
        # get indices with colors :P
        KNOWN_TAGS.update @getCategory()
        
        # Ignore functions/callbacks and, ahem, hidden tags.
        type = @get 'type', '' .toLowerCase()
        tags = @get 'tags', []
        if _.str.include(type, 'function') or _.intersection(tags, @IGNORED_TAGS).length
            @set 'ignore', true
    
    
    # Wrapper to ensure @set('tags') is called, as tags.push()
    # will not trigger the 'changed:tags' event.
    addTag: (tag) ->
        return this unless tag
        tags = @get('tags', [])
        tags.push tag
        @set 'tags', tags
        this
    
    # Wrapper to ensure @set('tags') is called, as tags.push()
    # will not trigger the 'changed:tags' event.
    removeTag: (tag) ->
        return this unless tag
        tags = @get('tags', [])
        _.remove tags, tag
        @set 'tags', tags
        this
    
    # Keep tag list up to date
    onTagUpdate: ->
        KNOWN_TAGS.update @get 'tags'
        this
    
    getTagIndex: (tag) ->
        KNOWN_TAGS.get tag
    
    # A field's category is its first tag.
    getCategory: ->
        @get('tags', [])[0]
    
    getCategoryIndex: ->
        @getTagIndex @getCategory()
    
    
    toJSON: ->
        o = Field::toJSON ...
        for k, v in o
            o[k] = '' if v!?
        o
# }}}



/**
 * @class List of ChartOption fields.
 */
ChartOptionList = exports.ChartOptionList = FieldList.extend do # {{{
    ctorName   : 'ChartOptionList'
    model      : ChartOption
    
    
    constructor: function ChartOptionList
        FieldList ...
    
    /**
     * Override to omit defaults from URL.
     */
    toKVPairs: ->
         _.collapseObject @values {-keepDefaults, +serialize}
    
# }}}

