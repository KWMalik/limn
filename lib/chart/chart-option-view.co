_ = require 'kraken/util/underscore'
{ Field, FieldList, FieldView, Scaffold,
} = require 'kraken/scaffold'
{ ChartOption, ChartOptionList,
} = require 'kraken/chart/chart-option-model'

DEBOUNCE_RENDER = exports.DEBOUNCE_RENDER = 100ms


/**
 * @class View for a single configurable option in a chart type.
 */
ChartOptionView = exports.ChartOptionView = FieldView.extend do # {{{
    # __bind__  : <[ onClick ]>
    ctorName  : 'ChartOptionView'
    tagName   : 'section'
    className : 'chart-option field'
    template  : require 'kraken/template/chart-option'
    
    isCollapsed : true
    
    events :
        'blur .value'                        : 'update'
        'click input[type="checkbox"].value' : 'update'
        'submit .value'                      : 'update'
        'click .close'                       : 'toggleCollapsed'
        'click h3'                           : 'toggleCollapsed'
        'click .collapsed'                   : 'onClick'
    
    
    constructor: function ChartOptionView
        FieldView ...
    
    render: ->
        FieldView::render ...
        @$el.addClass 'collapsed' if @isCollapsed
        this
    
    onClick: (evt) ->
        target = $ evt.target
        # console.log "#this.onClick()", target
        @toggleCollapsed() if @$el.hasClass('collapsed') and not target.hasClass('close')
    
    toggleCollapsed: ->
        starting = @$el.hasClass 'collapsed' #@isCollapsed
        @$el.toggleClass 'collapsed'
        @isCollapsed = not starting
        # console.log "#this.toggleCollapsed!", starting, '->', @isCollapsed
        @trigger 'change:collapse', this, @isCollapsed
        this
    
# }}}



/**
 * @class View for configuring a chart type.
 */
ChartOptionScaffold = exports.ChartOptionScaffold = Scaffold.extend do # {{{
    ctorName       : 'ChartOptionScaffold'
    tagName        : 'form'
    className      : 'chart-options scaffold'
    template       : require 'kraken/template/chart-scaffold'
    collectionType : ChartOptionList
    subviewType    : ChartOptionView
    fields         : '.fields'
    
    # GraphView will set this
    ready          : false
    
    
    constructor: function ChartOptionScaffold
        Scaffold ...
    
    initialize : ->
        @render = _.debounce @render.bind(this), DEBOUNCE_RENDER
        Scaffold::initialize ...
    
    render: ->
        # console.log "#this.render() -> .isotope()"
        # Scaffold::render ...
        return this unless @ready
        container = if @fields then @$el.find @fields else @$el
        container
            .addClass 'isotope'
            .find '.chart-option.field' .addClass 'isotope-item'
        container.isotope do
            # itemPositionDataEnabled : true
            itemSelector    : '.chart-option.field'
            layoutMode      : 'masonry'
            masonry         : columnWidth : 10
            getSortData :
                category: ($el) ->
                    $el.data 'model' .getCategory()
            sortBy: 'category'
    
    /**
     * Add a ChartOption to this scaffold, rerendering the isotope
     * layout after collapse events.
     */
    addOne: (field) ->
        view = Scaffold::addOne ...
        view.on 'change:collapse render', @render
        view
    
    toKV: ->
        @collection.toKV ...
    
# }}}


