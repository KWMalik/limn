_    = require 'underscore'
_str = require 'underscore.string'

_string = do
    
    drop : (s, ...parts) ->
        do
            starting = s
            for part of parts
                s .= slice part.length              if _str.startsWith s, part
                s .= slice 0, s.length-part.length  if _str.endsWith   s, part
        while s and s is not starting
        s
    
    ldrop : (s, ...parts) ->
        do
            starting = s
            for part of parts
                s .= slice part.length if _str.startsWith s, part
        while s and s is not starting
        s
    
    rdrop : (s, ...parts) ->
        do
            starting = s
            for part of parts
                s .= slice 0, s.length-part.length if _str.endsWith s, part
        while s and s is not starting
        s
    
    # Converts to snake_case, concatenates the key-value pair (with '_'), normalizing _'s.
    # If only a key is given, domize auto-curries and waits for a second argument.
    domize : (key='', value='') ->
        key = _str.trim _str.underscored(key), '_'
        if arguments.length <= 1
            arguments.callee.bind this, key
        else
            "#{key}_#{_str.trim _str.underscored(value), '_'}"
    
    shortname: (s) ->
        return s if s.length <= 6
        parts = _ s
            .chain()
                .underscored()
                .trim '_'
            .value()
            .replace /_+/g, '_'
            .split '_'
            .map -> _.capitalize it.slice 0, 2
        return s if parts.length is 1 #and s.length <= 8
        parts.shift().toLowerCase() + parts.join('')
    

_string import do
    dropLeft  : _string.ldrop
    dropRight : _string.rdrop

exports import _string
