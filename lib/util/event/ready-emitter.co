{EventEmitter} = require 'events'
EventEmitter::trigger = EventEmitter::emit


/**
 * @class An EventEmitter that auto-triggers new handlers once "ready".
 */
class ReadyEmitter extends EventEmitter
    readyEventName : 'ready'
    ready : false
    
    /**
     * Triggers the 'ready' event if it has not yet been triggered.
     * Subsequent listeners added to this event will be auto-triggered.
     * @returns {this}
     */
    triggerReady: ->
        return this if @ready
        @ready = true
        @emit @readyEventName, this
        this
    
    /**
     * Resets the 'ready' event to its non-triggered state, firing a
     * 'ready-reset' event.
     * @returns {this}
     */
    resetReady: ->
        return this unless @ready
        @ready = false
        @emit "#{@readyEventName}-reset", this
        this
    
    
    /**
     * Wrap {@link EventEmitter#on} registration to handle registrations
     * on 'ready' after we've broadcast the event. Handler will always still
     * be registered, however, in case the emitter is reset.
     * 
     * @param {String} events Space-separated events for which to register.
     * @param {Function} callback
     * @param {Object} [context]
     * @returns {this}
     */
    on: (events, callback, context=this) ->
        return this if not callback
        super ...
        if @ready and -1 is not events.split(/\s+/).indexOf @readyEventName
            callback.call context, this
        this


module.exports = exports = ReadyEmitter
