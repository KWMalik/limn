
FALSEY = /^\s*(?:no|off|false)\s*$/i
parseBool = (s) ->
    i = parseInt(s or 0)
    !! if isNaN(i) then not FALSEY.test(s) else i

module.exports = op =
    
    I       : (x) -> x
    K       : (k) -> -> k
    nop     : ->
    kThis   : -> this
    kObject : -> {}
    kArray  : -> []
    
    # values
    val     : (def,o) -> o ? def
    ok      : (o)     -> o?
    
    first   : (a)     -> a
    second  : (_,a)   -> a
    nth     : (n) ->
        switch n
            case 0 then op.first
            case 1 then op.second
            default     -> arguments[n]
    
    flip    : (fn) ->
        (a, b) ->
            arguments[0] = b
            arguments[1] = a
            fn.apply this, arguments
    
    # reduce-ordered values & accessors
    khas      : (k,o)       ->  k in o
    kget      : (k,o)       ->  o[k]
    defkget   : (def,k,o)   ->  if k in o then o[k] else def
    thisget   : (k)         ->  this[k]
    vkset     : (o,v,k)     ->  o[k] = v if o and k?; o
    
    # curry-ordered values & accessors
    has       : (o,k)       ->  k in o
    get       : (o,k)       ->  o[k]
    getdef    : (o,k,def)   ->  if k in o then o[k] else def
    kvset     : (o,k,v)     ->  o[k] = v if o and k?; o
    thiskvset : (k,v)       ->  @[k] = v if k?; this
    
    prop      : (k) -> (o) -> o[k]
    method    : (name, ...args) ->
        (obj, ..._args) ->
            obj[name] ...args.concat(_args) if obj?[name]
    isK       : (k) -> (v) -> v is k
    
    # type coercion (w/ limited parameters for mapping)
    parseBool   : parseBool
    toBool      : (v) -> !! v
    toInt       : (v) -> parseInt v
    toFloat     : (v) -> parseFloat v
    toStr       : (v) -> String v
    
    # comparison
    cmp       : (x,y)  ->  if x < y then -1 else (if x > y then 1 else 0)
    eq        : (x,y)  ->  x == y
    ne        : (x,y)  ->  x != y
    gt        : (x,y)  ->  x  > y
    ge        : (x,y)  ->  x >= y
    lt        : (x,y)  ->  x  < y
    le        : (x,y)  ->  x <= y
    
    # math
    add       : (x,y)  ->  x  + y
    sub       : (x,y)  ->  x  - y
    mul       : (x,y)  ->  x  * y
    div       : (x,y)  ->  x  / y
    flrdiv    : (x,y)  ->  Math.floor(x / y)
    mod       : (x,y)  ->  x  % y
    neg       : (x)    ->  -x
    log2      : (n)    -> Math.log n / Math.LN2
    
    
    # logic
    is        : (x,y)  ->  x is y
    isnt      : (x,y)  ->  x is not y
    and       : (x,y)  ->  x and y
    or        : (x,y)  ->  x or y
    not       : (x)    ->  not x
    
    # bitwise
    bitnot    : (x)    ->  ~x
    bitand    : (x,y)  ->  x  & y
    bitor     : (x,y)  ->  x  | y
    bitxor    : (x,y)  ->  x  ^ y
    lshift    : (x,y)  ->  x << y
    rshift    : (x,y)  ->  x >> y
    # zrshift   : (x,y)     ->  x >>> y
    
    # binary
    
    # Binary representation of the number.
    bin : (n) ->
        do
            s = (if n % 2 then '1' else '0') + (s or '')
            n >>= 1
        while n
        s
    
    # Number of bits needed to represent the absolute value of n.
    binlen : (n) ->
        bin Math.abs n .length
    
    # Returns a run of 1s of size n.
    mask : (n) ->
        (1 << n) - 1
    
    # strings
    chr    : -> String.fromCharCode it
    ord    : -> String(it).charCodeAt 0
    encode : -> it and $ "<div>#it</div>" .html().replace /"/g, '&quot;'
    decode : -> it and $ "<div>#it</div>" .text()
    
    

