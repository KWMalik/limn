
# Expose Underscore so Backbone can find it
_ = require 'underscore'
window?._ = _

# Expose Backbone so plugins can find it
Backbone = require 'backbone'
window?.Backbone = Backbone

# Pass jQuery to Backbone, as it only looks on its module if `require` is defined
Backbone.setDomLibrary that if window? and (window.jQuery or window.Zepto or window.ender)


_backbone = do
    
    /**
     * @returns {Array<Class>} The list of all superclasses for this class or object.
     */
    getSuperClasses: function getSuperClasses(Cls)
        Cls .= constructor if cls and typeof Cls is not 'function'
        if superclass = Cls?.__super__?.constructor
            [superclass].concat getSuperClasses superclass
        else
            []
    

exports import _backbone


/**
 * Decorates a function so that its receiver (`this`) is always added as the
 * first argument, followed by the call arguments.
 * @returns {Function}
 */
methodize = exports.methodize = (fn) ->
    m = fn.__methodized__
    return m if m
    
    g = fn.__genericized__
    return that if g?.__wraps__
    
    m = fn.__methodized__ = (...args) ->
        args.unshift this
        fn.apply this, args
    
    m.__wraps__ = fn
    m


# Add the class extensions as static methods of the Backbone classes
_methodized = exports._methodized = _.reduce do
    _backbone
    (o, v, k) ->
        o[k] = if typeof v is 'function' then methodize v else v
        o
    {}

for Cls of Backbone.<[ Model Collection View ]>
    Cls     import _methodized
    Cls::   import _methodized

