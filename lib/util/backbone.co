### Patches to make Backbone work with browserify

# Expose Underscore so Backbone can find it
_ = require 'underscore'
window?._ = _

# Expose Backbone so plugins can find it
Backbone = require 'backbone'
window?.Backbone = Backbone

# Pass jQuery to Backbone, as it only looks on its module if `require` is defined
Backbone.setDomLibrary that if window? and (window.jQuery or window.Zepto or window.ender)


_bb_events =
    
    /**
     * Registers an event listener on the given event(s) to be fired only once.
     * 
     * @param {String} events Space delimited list of event names.
     * @param {Function} callback Event listener function.
     * @param {Object} [context=this] Object to be supplied as the context for the listener.
     * @returns {this}
     */
    once: (events, callback, context) ->
        fn = ~>
            @off events, arguments.callee, this
            callback.apply (context or this), arguments
        @on events, fn, this
        this
    
    /**
     * Compatibility with Node's `EventEmitter`.
     */
    emit: Backbone.Events.trigger



/**
 * @namespace Meta-utilities for working with Backbone classes.
 */
_backbone = do
    
    /**
     * @returns {Array<Class>} The list of all superclasses for this class or object.
     */
    getSuperClasses: function getSuperClasses(Cls)
        return [] unless Cls
        
        if Cls.__superclass__
            superclass = that
        else
            Cls = Cls.constructor unless typeof Cls is 'function'
            superclass = Cls.__super__?.constructor
        
        if superclass
            [superclass].concat getSuperClasses superclass
        else
            []
    
    /**
     * Looks up an attribute on the prototype of each class in the class
     * hierarchy.
     * @returns {Array}
     */
    pluckSuper: (obj, prop) ->
        return [] unless obj
        _ _backbone.getSuperClasses(obj) .chain()
        .pluck 'prototype'
        .pluck prop 
        .value()
    
    /**
     * As `.pluckSuper()` but includes value of `prop` on passed `obj`.
     * @returns {Array}
     */
    pluckSuperAndSelf: (obj, prop) ->
        return [] unless obj
        [ obj[prop] ].concat _backbone.pluckSuper(obj, prop)


exports import _backbone



/**
 * Decorates a function so that its receiver (`this`) is always added as the
 * first argument, followed by the call arguments.
 * @returns {Function}
 */
methodize = exports.methodize = (fn) ->
    m = fn.__methodized__
    return m if m
    
    g = fn.__genericized__
    return that if g?.__wraps__
    
    m = fn.__methodized__ = (...args) ->
        args.unshift this
        fn.apply this, args
    
    m.__wraps__ = fn
    m


# Add the class extensions as static methods of the Backbone classes
_methodized = exports._methodized = _.reduce do
    _backbone
    (o, v, k) ->
        o[k] = if typeof v is 'function' then methodize v else v
        o
    {}


_.extend Backbone.Events, _bb_events
for Cls of Backbone.<[ Model Collection View ]>
    Cls     import _methodized import _bb_events import Backbone.Events
    Cls::   import _methodized import _bb_events

