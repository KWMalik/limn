{ _, op,
} = require 'kraken/util'
{ BaseModel, BaseList,
} = require 'kraken/base'
DataSource = DataSourceList = null

/**
 * @class
 */
Metric = exports.Metric = BaseModel.extend do # {{{
    urlRoot  : '/metrics'
    
    /**
     * Data source of the Metric.
     * @type DataSource
     */
    source : null
    
    defaults : ->
        index           : 0
        label           : 'New Metric'
        type            : 'int'
        timespan        : { start:null, end:null, step:null }
        disabled        : false
        
        # DataSource
        source_id  : null
        source_col : -1
        
        # Chart Options
        color           : null
        visible         : true
        format_value    : null
        format_axis     : null
        
        transforms      : []
        scale           : 1.0
    
    
    
    constructor: function Metric
        BaseModel ...
    
    initialize : ->
        BaseModel::initialize ...
        @on 'change:source_id',  @load,     this
        @on 'change:source_col', @updateId, this
        @load()
    
    
    getDateColumn: ->
        @source.getDateColumn()
    
    getData: ->
        @source.getColumn @get 'source_col'
    
    
    load: (opts={}) ->
        source_id = @get 'source_id'
        @resetReady() if opts.force or @source?.id is not source_id
        return this if not source_id or @loading or @ready
        
        console.log "#this.load()..."
        @updateId()
        @loading = true
        @wait()
        @trigger 'load', this
        
        DataSource.lookup source_id, (err, source) ~>
            # console.log "#this.onSourceReady", arguments
            @loading = false
            @unwait() # terminates the `load` wait
            if err
                console.error "#{this} Error loading DataSource! #err"
            else
                console.log "#{this}.load() complete!"
                @source = source
                @updateId()
                @triggerReady()
        this
    
    
    updateId: ->
        if (source_id = @get('source_id')) and (source_col = @get('source_col'))
            @id = "#source_id[#source_col]"
        this
    
    
    /**
     * Check whether the metric has aiight-looking values so we don't
     * attempt to graph unconfigured crap.
     */
    isOk: ->
        (label = @get('label')) and label is not 'New Metric'
        and @get('source_id')   and @get('source_col') >= 0
        and _.every @get('timespan'), op.ok
    
    getSourceColumnName: ->
        @source?.getColumnName @get 'source_col'
    
# }}}


/**
 * @class
 */
MetricList = exports.MetricList = BaseList.extend do # {{{
    urlRoot  : '/metrics'
    model    : Metric
    
    constructor: function MetricList then BaseList ...
    initialize: -> BaseList::initialize ...
    
    comparator: (metric) ->
        metric.get('index') ? Infinity
    
# }}}

### FIXME: LOLHACKS ###
setTimeout do
    -> { DataSource, DataSourceList, } := require 'kraken/dataset/datasource-model'
    10

