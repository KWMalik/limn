{ _, op,
} = require 'kraken/util'
{ BaseModel, BaseList,
} = require 'kraken/base'
DataSource = DataSourceList = null

/**
 * @class
 */
Metric = exports.Metric = BaseModel.extend do # {{{
    urlRoot  : '/metrics'
    
    /**
     * Data source of the Metric.
     * @type DataSource
     */
    source : null
    
    defaults : ->
        index           : 0
        label           : 'New Metric'
        type            : 'int'
        timespan        : { start:null, end:null, step:null }
        disabled        : false
        
        # DataSource
        source_id  : null
        source_col : -1
        
        # Chart Options
        color           : null
        visible         : true
        format_value    : null
        format_axis     : null
        
        transforms      : []
        scale           : 1.0
    
    
    
    constructor: function Metric
        BaseModel ...
    
    initialize : ->
        BaseModel::initialize ...
        @on 'change:source_id', @onUpdateSource, this
        @onUpdateSource()
    
    
    onUpdateSource: ->
        if source_id = @get 'source_id'
            @wait()
            DataSource.lookup source_id, @onSourceReady, this
        this
    
    onSourceReady: (err, source) ->
        console.log "#this.onSourceReady", arguments
        @unwait()
        if err
            console.error "#this Error loading DataSource! #err"
        else
            @source = source
            unless @ready
                @ready = true
                @trigger 'ready', this
        this
    
    
    /**
     * Check whether the metric has aiight-looking values so we don't
     * attempt to graph unconfigured crap.
     */
    isOk: ->
        (label = @get('label')) and label is not 'New Metric'
        and @get('source_id')   and @get('source_col') >= 0
        and _.every @get('timespan'), op.ok
    
    getSourceColumnName: ->
        @source?.getColumnName @get 'source_col'
    
# }}}


/**
 * @class
 */
MetricList = exports.MetricList = BaseList.extend do # {{{
    urlRoot  : '/metrics'
    model    : Metric
    
    constructor: function MetricList then BaseList ...
    initialize: -> BaseList::initialize ...
    
    comparator: (metric) ->
        metric.get('index') ? Infinity
    
# }}}

### FIXME: LOLHACKS ###
setTimeout do
    -> { DataSource, DataSourceList, } := require 'kraken/dataset/datasource-model'
    10

