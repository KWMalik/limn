Seq = require 'seq'
{ _, op,
} = require 'kraken/util'
{ BaseView,
} = require 'kraken/base'
{ DataSetView,
} = require 'kraken/dataset/dataset-view'
{ MetricEditView,
} = require 'kraken/dataset/metric-edit-view'


/**
 * @class
 */
DataView = exports.DataView = BaseView.extend do # {{{
    __bind__       : <[ ]>
    tagName        : 'section'
    className      : 'data-ui'
    template       : require 'kraken/template/data'
    
    datasources : {}
    
    
    
    constructor: function DataView
        BaseView ...
    
    initialize: ->
        @graph_id = @options.graph_id
        BaseView::initialize ...
        @on 'ready', @onReady, this
        @load()
    
    
    load: ->
        @wait()
        $.getJSON '/datasources/all', (@datasources) ~>
            _.each @datasources, @canonicalizeDataSource, this
            @ready = true
            @unwait()
            @render()
            @trigger 'ready', this
    
    /**
     * Transform the `columns` field to ensure an Array of {label, type} objects.
     */
    canonicalizeDataSource: (ds) ->
        ds.shortName    or= ds.name
        ds.title        or= ds.name
        ds.subtitle     or= ''
        
        cols = ds.columns
        if _.isArray cols
            ds.metrics = _.map cols, (col, idx) ->
                if _.isArray col
                    [label, type] = col
                    {idx, label, type or 'int'}
                else
                    col
        else
            ds.metrics = _.map cols.labels, (label, idx) ->
                {idx, label, type:cols.types[idx] or 'int'}
        ds
    
    
    onReady: ->
        dataset = @model
        @metric_edit_view = @addSubview new MetricEditView  {@graph_id, dataset, @datasources}
        @metric_edit_view
            .on 'update',           @onUpdateMetric,      this
        
        @dataset_view = @addSubview new DataSetView {@model, @graph_id, dataset, @datasources}
        @dataset_view
            .on 'add-metric',       @onMetricsChanged,  this
            .on 'remove-metric',    @onMetricsChanged,  this
            .on 'edit-metric',      @editMetric,        this
        
        @attachSubviews()
        this
    
    
    toTemplateLocals: ->
        attrs = _.clone @model.attributes
        { $, _, op, @model, view:this, @graph_id, @datasources, } import attrs
    
    # attachSubviews: ->
    #     @$el.empty()
    #     BaseView::attachSubviews ...
    #     @$el.append '<div class="clearer"/>'
    #     this
    
    # Don't rebuild HTML, simply notify subviews
    render: ->
        @renderSubviews()
        @trigger 'render', this
        this
    
    editMetric: (metric) ->
        @metric_edit_view.editMetric metric
    
    onMetricsChanged: ->
        @$el.css 'min-height', @dataset_view.$el.height()
    
    onUpdateMetric: ->
        @renderSubviews()
# }}}
