{ _, op,
} = require 'kraken/util'
{ BaseView,
} = require 'kraken/base'


/**
 * @class
 */
DataSetView = exports.DataSetView = BaseView.extend do # {{{
    tagName   : 'section'
    className : 'dataset-ui dataset'
    template  : require 'kraken/template/dataset'
    
    events:
        'click .new-metric-button'       : 'newMetric'
        'click .metrics .dataset-metric' : 'editMetric'
    
    views_by_cid : {}
    active_view : null
    
    
    constructor: function DataSetView
        BaseView ...
    
    initialize: ->
        @graph_id = @options.graph_id
        BaseView::initialize ...
        @views_by_cid = {}
        @model.metrics.on 'add', @addMetric, this
    
    
    newMetric: ->
        console.log "#this.newMetric!"
        # triggers 'add' on @model.metrics
        @model.newMetric()
        false
    
    addMetric: (metric) ->
        console.log "#this.addMetric!", metric
        if metric.view
            @removeSubview metric.view
            delete @views_by_cid[metric.cid]
        
        view = @addSubview new DataSetMetricView {model:metric, @graph_id}
        @views_by_cid[metric.cid] = view
        @$el.find '.metrics' .append view.render().el
        
        # @render()
        @trigger 'add-metric', metric, view, this
        view
    
    editMetric: (metric) ->
        console.log "#this.editMetric!", metric
        if metric instanceof [jQuery.Event, Event]
            metric = $ metric.currentTarget .data 'model'
        view = @active_view = @views_by_cid[metric.cid]
        console.log '  --> metric:', metric, 'view:', view
        
        @$el.find '.metrics .dataset-metric' .removeClass 'metric-active'
        view.$el.addClass 'metric-active'
        view.$el.find '.activity-arrow' .css 'font-size', 2+view.$el.height()
        
        @trigger 'edit-metric', metric, view, this
        this
    
    render: ->
        this
    
# }}}



/**
 * @class
 */
DataSetMetricView = exports.DataSetMetricView = BaseView.extend do # {{{
    tagName   : 'tr'
    className : 'dataset-metric metric'
    template  : require 'kraken/template/dataset-metric'
    
    
    
    constructor: function DataSetMetricView
        BaseView ...
    
    initialize: ->
        @graph_id = @options.graph_id
        BaseView::initialize ...
    
    
    toTemplateLocals: ->
        m = @model.toJSON()
        m import
            graph_id : @graph_id
            viewClasses : _.compact([
                if @model.isOk() then 'valid'   else 'invalid',
                if m.visible     then 'visible' else 'hidden',
                'disabled' if m.disabled,
            ]).map( -> "metric-#it" ).join ' '
            source :
                if m.source_id and m.source_col_name
                    "#{m.source_id}.#{m.source_col_name}"
                else
                    'No source'
            timespan :
                if _.every ts = m.timespan, op.ok
                    "#{ts.start} to #{ts.end} by #{ts.step}"
                else
                    '&mdash;'
        
        # XXX: Icons/classes for visible/disabled?
        { $, _, op, @model, view:this } import m
    
# }}}

