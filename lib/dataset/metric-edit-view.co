{ _, op,
} = require 'kraken/util'
{ BaseView,
} = require 'kraken/base'
{ Metric,
} = require 'kraken/dataset/metric-model'
{ DataSourceUIView,
} = require 'kraken/dataset/datasource-ui-view'



/**
 * @class
 */
MetricEditView = exports.MetricEditView = BaseView.extend do # {{{
    ctorName       : 'MetricEditView'
    tagName        : 'section'
    className      : 'metric-edit-ui'
    template       : require 'kraken/template/metric-edit'
    
    graph_id           : null
    dataset            : null
    datasource_ui_view : null
    
    
    constructor: function MetricEditView
        BaseView ...
    
    initialize: ->
        this import @options.{graph_id, dataset}
        @model or= new Metric
        BaseView::initialize ...
        @subviews.push @datasource_ui_view = new DataSourceUIView {@model, @graph_id}
        @$el.find '.metric-datasource' .append @datasource_ui_view.render().el
    
    
    toTemplateLocals: ->
        locals = BaseView::toTemplateLocals ...
        locals import {@graph_id}
    
    build: ->
        BaseView::build ...
        if @datasource_ui_view
            @$el.find '.metric-datasource' .append @datasource_ui_view.render().el
        this
    
    editMetric: (metric) ->
        console.log "#this.editMetric!", metric
        @model = metric
        @render()
        @show()
        this
    
# }}}

