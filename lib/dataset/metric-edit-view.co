{ _, op,
} = require 'kraken/util'
{ BaseView,
} = require 'kraken/base'
{ Metric,
} = require 'kraken/dataset/metric-model'
{ DataSourceUIView,
} = require 'kraken/dataset/datasource-ui-view'



/**
 * @class
 */
MetricEditView = exports.MetricEditView = BaseView.extend do # {{{
    tagName        : 'section'
    className      : 'metric-edit-ui'
    template       : require 'kraken/template/metric-edit'
    
    callOnReturnKeypress : 'onChanged'
    events:
        'keydown .metric-label' : 'onReturnKeypress'
    
    graph_id           : null
    dataset            : null
    datasources        : null
    datasource_ui_view : null
    
    
    constructor: function MetricEditView
        BaseView ...
    
    initialize: ->
        this import @options.{graph_id, dataset, datasources}
        @model or= new Metric
        BaseView::initialize ...
        @datasource_ui_view = new DataSourceUIView {@model, @graph_id, @dataset, @datasources}
        @addSubview @datasource_ui_view
            .on 'update', ~> @trigger 'update', this
        @$ '.metric-datasource' .append @datasource_ui_view.render().el
    
    
    toTemplateLocals: ->
        locals = BaseView::toTemplateLocals ...
        locals import { @graph_id, @dataset, @datasources }
    
    build: ->
        BaseView::build ...
        if @datasource_ui_view
            @$ '.metric-datasource' .append @datasource_ui_view.render().el
        this
    
    update: ->
        color = @model.get 'color'
        @$ '.color-swatch' .css 'background-color', color
        @$ '.metric-color' .val color
        @$ '.metric-label' .val @model.get 'label'
        
        this
    
    onChanged: ->
        attrs = @$ 'form.metric-edit-form' .formData()
        @model.set attrs, {+silent}
        @trigger 'update', this
    
    editMetric: (metric) ->
        console.log "#this.editMetric!", metric
        @datasource_ui_view.setModel @setModel metric
        @render()
        @show()
        this
    
# }}}

