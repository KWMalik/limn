Seq = require 'seq'
ColorBrewer = require 'colorbrewer'

{ _, op,
} = require 'kraken/util'
{ BaseModel, BaseList,
} = require 'kraken/base'
{ Metric, MetricList,
} = require 'kraken/dataset/metric-model'
{ DataSource, DataSourceList,
} = require 'kraken/dataset/datasource-model'



/**
 * @class
 */
DataSet = exports.DataSet = BaseModel.extend do # {{{
    urlRoot : '/datasets'
    ready : false
    
    /**
     * @type DataSourceList
     */
    sources : null
    
    /**
     * @type MetricList
     */
    metrics : null
    
    defaults : ->
        palette : null
        lines   : []
        metrics : []
    
    
    constructor: function DataSet
        BaseModel ...
    
    initialize : ->
        BaseModel::initialize ...
        @sources = new DataSourceList
        @metrics = new MetricList @attributes.metrics
        @on 'change:metrics', @onMetricChange, this
    
    
    
    load: (opts={}) ->
        return this if @ready and not opts.force
        @wait()
        @trigger 'load', this
        Seq _.unique @metrics.pluck 'source_id'
            .parMap_ (next, source_id) ->
                DataSource.lookup source_id, next
            .seqEach_ (next, source) ~>
                @sources.add source
                next.ok source
            .seq ~>
                @ready = true
                @unwait() # terminates the `load` wait
                @trigger 'ready', this
        this
    
    
    # TODO: toJSON() must ensure columns in MetricList are ordered by index
    #   ...in theory, MetricList.comparator now does this
    
    getDates: ->
        dates = @metrics.invoke 'getDates'
        maxLen = _.max _.pluck dates, 'length'
        _.find dates, -> it.length is maxLen
    
    /**
     * @returns {Array} The reified dataset, materialized to an array of data-series arrays.
     */
    getData: ->
        _.zip ...[ @getDates() ].concat @metrics.invoke 'getData'
    
    getLabels: ->
        ['Date'].concat @metrics.pluck 'label'
    
    newMetric: ->
        index = @metrics.length
        @metrics.add m = new Metric { index, color:ColorBrewer.Spectral[11][index] }
        m
    
    
    onMetricChange: ->
        @metrics.reset @get 'metrics'
    
# }}}

