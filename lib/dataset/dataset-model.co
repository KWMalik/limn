Seq = require 'seq'
ColorBrewer = require 'colorbrewer'

{ _, op,
} = require 'kraken/util'
{ BaseModel, BaseList,
} = require 'kraken/base'
{ Metric, MetricList,
} = require 'kraken/dataset/metric-model'
{ DataSource, DataSourceList,
} = require 'kraken/dataset/datasource-model'



/**
 * @class
 */
DataSet = exports.DataSet = BaseModel.extend do # {{{
    urlRoot : '/datasets'
    ready : false
    
    /**
     * @type DataSourceList
     */
    sources : null
    
    /**
     * @type MetricList
     */
    metrics : null
    
    
    constructor: function DataSet
        BaseModel ...
    
    initialize : ->
        BaseModel::initialize ...
        @sources = new DataSourceList
        if @attributes.metrics
            @metrics = that.columns = new MetricList that.columns
    
    
    defaults : ->
        palette : null
        lines   : []
        metrics :
            defaults : {}
            columns  : []
    
    
    load: (opts={}) ->
        return this if @ready and not opts.force
        @wait()
        @trigger 'load', this
        Seq()
            .seq ~>
                @ready = true
                @trigger 'ready', this
                @unwait() # terminates the `load` wait
        this
    
    
    /**
     * @returns {Array} The reified dataset, materialized to an array of data-series arrays.
     */
    getData: ->
        '/data/datasources/rc/rc_comscore_region_uv.csv'
    
    newMetric: ->
        index = @metrics.length
        @metrics.add m = new Metric { index, color:ColorBrewer.Spectral[11][index] }
        m
    
    
# }}}

