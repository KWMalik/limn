{ _, op,
} = require 'kraken/util'
{ BaseModel, BaseList, BaseView,
} = require 'kraken/base'


/**
 * @class
 */
DataSource = exports.DataSource = BaseModel.extend do # {{{
    urlRoot  : '/datasources'
    
    
    constructor: function DataSource
        BaseModel ...
    
    initialize: ->
        BaseModel::initialize ...
    
    
    defaults: ->
        id            : ''
        url           : ''
        format        : 'json'
        
        name          : ''
        shortName     : ''
        title         : ''
        subtitle      : ''
        desc          : ''
        notes         : ''
        
        timespan : 
            start     : null
            stop      : null
            step      : '1mo'
        
        columns       : []
        
        chart : 
            chartType : 'dygraphs'
            options   : {}
    
    url: ->
        "/datasources/#{@id}.json"
    
# }}}



/**
 * @class
 */
DataSourceList = exports.DataSourceList = BaseList.extend do # {{{
    urlRoot  : '/datasources'
    model    : DataSource
    
    constructor: function DataSourceList then BaseList ...
    initialize : -> BaseList::initialize ...
    
    
# }}}


/* * * *  DataSource Cache  * * * */

DataSource import do
    CACHE : new DataSourceList
    
    register: (model) ->
        # console.log "#{@CACHE}.register(#{model.id or model.get('id')})", model
        if @CACHE.contains model
            @CACHE.remove model, {+silent}
        @CACHE.add model
        model
    
    get: (id) ->
        @CACHE.get id
    
    lookup: (id, cb) ->
        # console.log "#{@CACHE}.lookup(#id, #{typeof cb})"
        if @CACHE.get id
            cb null, that
        else
            Cls = this
            @register new Cls {id}
                .on 'ready', -> cb null, it
    

_.bindAll DataSource, 'register', 'get', 'lookup'


