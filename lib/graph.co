_ = require 'kraken/underscore'
{ Field, FieldList, BaseView, FieldView, Scaffold
} = require 'kraken/scaffold'


/**
 * Field with graph-option-specific handling for validation, parsing, tags, etc.
 */
GraphOption = exports.GraphOption = Field.extend do # {{{
    ctorName : 'GraphOption'
    # initialize : ->
    #     # console.log "#this.initialize!"
    #     Field::initialize ...
    
    toJSON: ->
        o = Field::toJSON ...
        for k, v in o
            o[k] = '' if v!?
        o
    
# }}}


GraphOptionList = exports.GraphOptionList = FieldList.extend do # {{{
    ctorName : 'GraphOptionList'
    model    : GraphOption
# }}}


/**
 * The view for a single configurable option.
 */
GraphOptionView = exports.GraphOptionView = FieldView.extend do # {{{
    ctorName  : 'GraphOptionView'
    tagName   : 'div'
    className : 'field option'
    template  : require 'kraken/template/graph-option'
    
    isCollapsed : true
    
    events :
        'blur .value'                   : 'update'
        'submit .value'                 : 'update'
    
    
    initialize: ->
        # console.log "#this.initialize!"
        FieldView::initialize ...
        @$el.on 'click', (evt) ~>
            target = $ evt.target
            @toggleCollapsed() if @el is evt.target or not target.is '.value, label, input'
        
    
    update: ->
        val     = @$el.find('.value').val()
        current = @model.get 'value'
        return if val is current
        
        console.log "#this.update( #current -> #val )"
        @model.setValue val, {+silent}
    
    render: ->
        FieldView::render.call this
        @$el.addClass 'collapsed' if @isCollapsed
        # outer = $ @template @model.toJSON()
        # @$el.html outer.html()
        #     .attr do
        #         id    : outer.attr 'id'
        #         class : outer.attr('class') + if @isCollapsed then ' collapsed' else ''
        this
    
    toggleCollapsed: ->
        @$el.toggleClass 'collapsed'
        @isCollapsed = @$el.hasClass 'collapsed'
        this
    
# }}}



GraphOptionsScaffold = exports.GraphOptionsScaffold = Scaffold.extend do # {{{
    ctorName       : 'GraphOptionsScaffold'
    tagName        : 'form'
    className      : 'options scaffold'
    collectionType : GraphOptionList
    subviewType    : GraphOptionView
    
    # initialize : ->
    #     Scaffold::initialize ...
    
    render: ->
        @__super__.render ...
        @$el.isotope do
            itemSelector    : '.field.option'
            layoutMode      : 'masonry'
            masonry         : columnWidth : 100
            # animationEngine : 'jquery'
            itemPositionDataEnabled : true
        
    
# }}}




/**
 * Represents a Graph, including its charting options, dataset, annotations, and all
 * other settings for both its content and presentation.
 */
GraphModel = exports.GraphModel = Backbone.Model.extend do # {{{
    ctorName : 'GraphModel'
    urlRoot  : '/graphs'
    
    initialize : ->
        name = @get 'name'
        if name and not (@id or @has 'id')
            @id = @attributes.id = _.underscored name
    
    defaults : ->
        {
            name    : 'Kraken Graph'
            dataset : '/data/page_views_by_language.csv'
            options : {}
        }
    
    toString: -> "#{@ctorName}(id=#{@id}, name=#{@get 'name'}, dataset=#{@get 'dataset'})"
# }}}


GraphView = exports.GraphView = BaseView.extend do # {{{
    ctorName  : 'GraphView'
    tagName   : 'section'
    className : 'graph'
    template  : require 'kraken/template/graph'
    
    events:
        'keypress form.options .value' : 'onKeypress'
        'submit   form.options'        : 'onSubmit'
    
    
    initialize : (o={}) ->
        @model or= new GraphModel
        BaseView::initialize ...
        
        @model.on 'change',  @render, this
        @model.on 'destroy', @remove, this
        
        @build()
        @viewport = @$el.find '.viewport'
        
        @scaffold = new GraphOptionsScaffold
        @$el.find 'fieldset' .append @scaffold.el
        @scaffold.collection.reset that if o.graph_spec
        
        setTimeout do
            ~> @render()
            50
    
    
    chartOptions: (values) ->
        # Handle @chartOptions k, v
        if arguments.length > 1
            [k, v] = arguments
            values = { "#k": v }
        
        options = @scaffold.collection
        if values
            for k, v in values
                options.get(k)?.setValue v
            this
        else
            options.values()
    
    render: ->
        # BaseView::render ...
        
        options = @chartOptions()
        w = options.width  or= @scaffold.get 'width'  .getValue() or 480
        h = options.height or= @scaffold.get 'height' .getValue() or 320
        @viewport.css { width:w, height:h }
        
        # Remove old style, as it confuses dygraph after options update
        @viewport.attr 'style', ''
        
        console.log "#this"
        console.log do 
            "  .viewport.{ width=%s, height=%s, style=%s }"
            @viewport.css('width')
            @viewport.css('height')
            @viewport.attr 'style'
            @viewport
        console.log '  .options:', JSON.stringify options
        
        # @chart?.destroy()
        unless @chart
            @chart = new Dygraph do
                @viewport.0
                @model.get 'dataset'
                options
        else
            @chart.updateOptions options
            @chart.resize w, h
        
        this
    
    onKeypress: (evt) ->
        $(evt.target).submit() if evt.keyCode is 13
    
    onSubmit: ->
        console.log "#this.onSubmit!"
        @render()
        false
    
    toString: -> "#{@ctorName}(#{@model})"
# }}}



