_ = require 'kraken/underscore'
{ Field, FieldList, FieldView, Scaffold
} = require 'kraken/scaffold'


/**
 * Field with graph-option-specific handling for validation, parsing, tags, etc.
 */
GraphOption = exports.GraphOption = Field.extend do # {{{
    ctorName : 'GraphOption'
    # initialize : ->
    #     # console.log "#this.initialize!"
    #     Field::initialize ...
# }}}


GraphOptionList = exports.GraphOptionList = FieldList.extend do # {{{
    ctorName : 'GraphOptionList'
    model    : GraphOption
    # initialize : ->
    #     console.log "#this.initialize!"
    #     FieldList::initialize ...
# }}}


GraphOptionView = exports.GraphOptionView = FieldView.extend do # {{{
    ctorName  : 'GraphOptionView'
    tagName   : 'div'
    className : 'field option'
    template  : require 'kraken/template/graph-option'
    
    events :
        'blur .value'   : 'update'
        'submit .value' : 'update'
    
    # initialize: ->
    #     # console.log "#this.initialize!"
    #     FieldView::initialize ...
    
    update: ->
        val     = @$el.find('.value').val()
        current = @model.get 'value'
        return if val is current
        
        console.log "#this.update( #current -> #val )"
        @model.setValue val, {+silent}
    
    render: ->
        @$el.html @template @model.toJSON()
        this
    
# }}}



GraphOptionsScaffold = exports.GraphOptionsScaffold = Scaffold.extend do # {{{
    ctorName       : 'GraphOptionsScaffold'
    className      : 'options scaffold'
    collectionType : GraphOptionList
    subviewType    : GraphOptionView
# }}}


GraphModel = exports.GraphModel = Backbone.Model.extend do # {{{
    ctorName : 'GraphModel'
    urlRoot  : '/graphs'
    
    initialize : ->
        name = @get 'name'
        if name and not (@id or @has 'id')
            @id = @attributes.id = _.underscored name
    
    defaults : ->
        {
            name    : 'Kraken Graph'
            dataset : '/data/page_views_by_language.csv'
            options : {}
        }
    
    toString: -> "#{@ctorName}(id=#{@id}, name=#{@get 'name'}, dataset=#{@get 'dataset'})"
# }}}


GraphView = exports.GraphView = Backbone.View.extend do # {{{
    ctorName  : 'Graph'
    tagName   : 'section'
    className : 'graph'
    template  : require 'kraken/template/graph'
    
    events:
        'keypress form.options .value' : 'onKeypress'
        'submit   form.options'        : 'onSubmit'
    
    
    initialize : (o={}) ->
        {graph_spec} = o
        @model or= new GraphModel
        
        @$el.data { model:@model, view:this }
        @model.on 'change',  @render, this
        @model.on 'destroy', @remove, this
        
        @viewport = @$el.find '.viewport'
        @scaffold = new GraphOptionsScaffold do
            el: @$el.find 'form.settings'
        @scaffold.collection.reset graph_spec
        
        @render()
    
    
    chartOptions: (values) ->
        # Handle @chartOptions k, v
        if arguments.length > 1
            [k, v] = arguments
            values = { "#k": v }
        
        options = @scaffold.collection
        if values
            for k, v in values
                options.get(k)?.setValue v
            this
        else
            options.values()
    
    render: ->
        @viewport.empty()
        
        # Remove old style, as it confuses dygraph after options update
        @viewport.attr 'style', ''
        console.log "#this"
        console.log do 
            "  .viewport.{ width=%s, height=%s, style=%s }"
            @viewport.css('width')
            @viewport.css('height')
            @viewport.attr 'style'
        console.log '  .options:', JSON.stringify @chartOptions()
        
        @chart?.destroy()
        @chart = new Dygraph do
            @viewport.0
            @model.get 'dataset'
            @chartOptions()
    
    onKeypress: (evt) ->
        $(evt.target).submit() if evt.keyCode is 13
    
    onSubmit: ->
        console.log "#this.onSubmit!"
        @render()
        false
    
    toString: -> "#{@ctorName}(#{@model})"
# }}}



