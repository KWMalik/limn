_ = require 'kraken/underscore'
{BaseView} = require 'kraken/base'
{ Field, FieldList, FieldView, Scaffold
} = require 'kraken/scaffold'
{   GraphModel, GraphOption, GraphOptionList, TagSet,
} = require 'kraken/graph/model'

root = do -> this
DEBOUNCE_RENDER = exports.DEBOUNCE_RENDER = 100ms


/**
 * The view for a single configurable option.
 */
GraphOptionView = exports.GraphOptionView = FieldView.extend do # {{{
    # __bind__  : <[ onClick ]>
    ctorName  : 'GraphOptionView'
    tagName   : 'div'
    className : 'field option'
    template  : require 'kraken/template/graph-option'
    
    isCollapsed : true
    
    events :
        'blur .value'                        : 'update'
        'click input[type="checkbox"].value' : 'update'
        'submit .value'                      : 'update'
        'click .close'                       : 'toggleCollapsed'
        'click h3'                           : 'toggleCollapsed'
        'click .collapsed'                   : 'onClick'
    
    
    render: ->
        @__super__.render ...
        @$el.addClass 'collapsed' if @isCollapsed
        this
    
    onClick: (evt) ->
        target = $ evt.target
        # console.log "#this.onClick()", target
        @toggleCollapsed() if @$el.hasClass('collapsed') and not target.hasClass('close')
    
    toggleCollapsed: ->
        starting = @$el.hasClass 'collapsed' #@isCollapsed
        @$el.toggleClass 'collapsed'
        @isCollapsed = not starting
        # console.log "#this.toggleCollapsed!", starting, '->', @isCollapsed
        @trigger 'change:collapse', this, @isCollapsed
        this
    
# }}}



GraphOptionsScaffold = exports.GraphOptionsScaffold = Scaffold.extend do # {{{
    ctorName       : 'GraphOptionsScaffold'
    tagName        : 'form'
    className      : 'options scaffold'
    collectionType : GraphOptionList
    subviewType    : GraphOptionView
    
    # GraphView will set this
    ready          : false
    
    
    
    initialize : ->
        @render = _.debounce @render.bind(this), DEBOUNCE_RENDER
        Scaffold::initialize ...
    
    render: ->
        # console.log "#this.render() -> .isotope()"
        @__super__.render ...
        return this unless @ready
        @$el.isotope do
            itemSelector    : '.field.option'
            layoutMode      : 'masonry'
            masonry         : columnWidth : 10
            # itemPositionDataEnabled : true
    
    /**
     * Add a GraphOption to this scaffold, rerendering the isotope
     * layout after collapse events.
     */
    addOne: (field) ->
        view = @__super__.addOne ...
        view.on 'change:collapse render', @render
        view
    
    toKVPairs: ->
        @collection.toKVPairs ...
    
# }}}




GraphView = exports.GraphView = BaseView.extend do # {{{
    __bind__  : <[ render renderAll onReady ]>
    ctorName  : 'GraphView'
    tagName   : 'section'
    className : 'graph'
    template  : require 'kraken/template/graph'
    
    events:
        'keypress form.options .value' : 'onKeypress'
        'submit   form.options'        : 'onSubmit'
    
    ready: false
    
    
    
    initialize : (o={}) ->
        @model or= new GraphModel
        BaseView::initialize ...
        # console.log "#this.initialize!"
        @render    = _.debounce @render,    DEBOUNCE_RENDER
        @renderAll = _.debounce @renderAll, DEBOUNCE_RENDER
        
        @model.on 'destroy', @remove, this
        @model.on 'change',  @render, this
        @model.on 'change:options', ~>
            changes = @model.changedAttributes()
            # console.log 'Model.changed(options) ->', changes
            @chartOptions changes, {+silent}
        
        @build()
        @viewport = @$el.find '.viewport'
        
        @scaffold = new GraphOptionsScaffold
        @$el.find 'fieldset' .append @scaffold.el
        @scaffold.collection.reset that if o.graph_spec
        
        @scaffold.on 'change', (scaffold, value, key, field) ~>
            # console.log "scaffold.change!", value, key, field
            @model.setOption key, value, {+silent} unless field.isDefault()
        
        options = @model.get 'options', {}
        @chartOptions options, {+silent}
        
        _.delay @onReady, DEBOUNCE_RENDER
    
    onReady: ->
        @ready = @scaffold.ready = true
        @renderAll()
    
    chartOptions: (values, opts) ->
        # Handle @chartOptions(k, v, opts)
        if arguments.length > 1 and typeof values is 'string'
            [k, v, opts] = arguments
            values = { "#k": v }
        
        options = @scaffold.collection
        if values
            for k, v in values
                options.get(k)?.setValue v, opts
            this
        else
            options.values()
    
    
    render: ->
        return this unless @ready
        options = @chartOptions()
        w = options.width  or= @scaffold.get 'width'  .getValue() or 480
        h = options.height or= @scaffold.get 'height' .getValue() or 320
        @viewport.css { width:w, height:h }
        
        # Remove old style, as it confuses dygraph after options update
        @viewport.attr 'style', ''
        
        # console.log "#this"
        # console.log do 
        #     "  .viewport.{ width=%s, height=%s, style=%s }"
        #     @viewport.css('width')
        #     @viewport.css('height')
        #     @viewport.attr 'style'
        # console.log '  .options:', JSON.stringify options
        
        # @chart?.destroy()
        unless @chart
            @chart = new Dygraph do
                @viewport.0
                @model.get 'dataset'
                options
        else
            @chart.updateOptions options
            @chart.resize w, h
        
        path = root.location?.path or '/'
        url = "#path?#{@toKVPairs()}"
        # console.log 'History.pushState', url
        History.pushState url, @model.get('name', root.document?.title or ''), url
        
        this
    
    renderAll: ->
        return this unless @ready
        _.invoke @scaffold.subviews, 'render'
        @scaffold.render()
        @render()
        this
    
    onKeypress: (evt) ->
        $(evt.target).submit() if evt.keyCode is 13
    
    onSubmit: ->
        # console.log "#this.onSubmit!"
        @render()
        false
    
    toKVPairs: ->
        @model.toKVPairs.apply @model, arguments
    
    toString: -> "#{@ctorName}(#{@model})"
# }}}



