root = do -> this

moment = require 'moment'

_ = require 'kraken/util/underscore'
{ BaseView,
} = require 'kraken/base'
{ ChartOptionScaffold, DEBOUNCE_RENDER,
} = require 'kraken/chart'
{ Graph,
} = require 'kraken/graph/graph-model'





/**
 * @class View for a graph visualization encapsulating the editing UI for:
 * - Graph metadata, such as name, description, slug
 * - Chart options, using ChartOptionScaffold
 */
GraphEditView = exports.GraphEditView = BaseView.extend do # {{{
    FILTER_CHART_OPTIONS : <[ 
        file labels visibility colors dateWindow ticker timingName xValueParser
        axisLabelFormatter xAxisLabelFormatter yAxisLabelFormatter
        valueFormatter xValueFormatter yValueFormatter
    ]>
    __bind__  : <[ 
        render renderAll resizeViewport
        onReady onSync
        onModelChange onScaffoldChange onFirstClickRenderOptionsTab
    ]>
    __debounce__: <[ render renderAll ]>
    ctorName  : 'GraphEditView'
    tagName   : 'section'
    className : 'graph graph-edit'
    template  : require 'kraken/template/graph-edit'
    
    events:
        'click    .redraw-button'                  : 'render'
        'click    .save-button'                    : 'save'
        'click    .load-button'                    : 'load'
        'keypress form.details input[type="text"]' : 'onKeypress'
        'keypress form.options .value'             : 'onKeypress'
        'submit   form.details'                    : 'onDetailsSubmit'
        'submit   form.options'                    : 'onOptionsSubmit'
        'change   input[type="checkbox"]'          : 'onOptionsSubmit'
    
    ready: false
    
    
    
    initialize : (o={}) ->
        @model or= new Graph
        BaseView::initialize ...
        # console.log "#this.initialize!"
        
        for name of @__debounce__
            @[name] = _.debounce @[name], DEBOUNCE_RENDER
        
        # Resize graph on window resize
        # Note: can't debounce the method itself, as the debounce wrapper returns undefined
        $ root .on 'resize', _.debounce(@resizeViewport, DEBOUNCE_RENDER)
        
        @id = _.domize 'graph', (@model.get('slug') or @model.id or @model.cid)
        
        @model
            .on 'ready',            @onReady
            .on 'sync',             @onSync
            .on 'destroy',          @remove,  this
            .on 'change',           @render,  this
            .on 'change:dataset',   @onModelChange
            .on 'change:options',   @onModelChange
            .on 'error', ~>
                console.error "#this.error!", arguments
                # TODO: UI alert
        
        # Rerender the options boxes once the tab is visible
        @$el.on 'click', '.graph-options-tab', @onFirstClickRenderOptionsTab
        
        @viewport = @$el.find '.viewport'
        
        @scaffold = new ChartOptionScaffold
        @$el.find '.graph-options-pane' .append @scaffold.el
        @scaffold.collection.reset that if o.graph_spec
        @scaffold.on 'change', @onScaffoldChange
        
        @chartOptions @model.getOptions(), {+silent}
        @resizeViewport()
        # _.delay @onReady, DEBOUNCE_RENDER
    
    
    
    
    load: ->
        console.log "#this.load!"
        @model.fetch()
    
    save: ->
        console.log "#this.save!"
        id = @model.id or @model.get('slug')
        @model.save {id}, {+wait}
    
    
    change: ->
        @model.change()
        @scaffold.invoke 'change'
        this
    
    chartOptions: (values, opts) ->
        # Handle @chartOptions(k, v, opts)
        if arguments.length > 1 and typeof values is 'string'
            [k, v, opts] = arguments
            values = { "#k": v }
        
        fields = @scaffold.collection
        if values
            for k, v in values
                fields.get(k)?.setValue v, opts
            this
        else
            options = @model.getOptions {-keepDefaults, +keepUnchanged}
            for k of @FILTER_CHART_OPTIONS
                # console.log "filter #k?", not options[k]
                if k in options and not options[k]
                    delete options[k]
            options
    
    
    toTemplateLocals: ->
        attrs = _.clone @model.attributes
        delete attrs.options
        { $, _, op, @model, view:this } import attrs
    
    
    /**
     * Resizes chart according to the model's width and height.
     * @return { width, height }
     */
    resizeViewport: ->
        modelW = width  = @model.get 'width'
        modelH = height = @model.get 'height'
        return { width, height } unless @ready
        
        # Remove old style, as it confuses dygraph after options update
        @viewport.attr 'style', ''
        label = @$el.find '.graph-label'
        
        if width is 'auto'
            vpWidth = @viewport.innerWidth()
            labelW = label.outerWidth()
            width = vpWidth - labelW - 10 - (vpWidth - label.position().left - labelW)
        width ?= modelW
        if height is 'auto'
            height = @viewport.innerHeight()
        height ?= modelH
        
        size = { width, height }
        @viewport.css size
        # console.log 'resizeViewport!', JSON.stringify(size), @viewport
        # @chart.resize size if forceRedraw
        size
    
    
    # Repopulate UI from Model
    renderDetails: ->
        form = @$el.find 'form.details'
        for k, v in @model.attributes
            continue if k is 'options'
            txt = @model.serialize v
            
            el = form.find "input[name=#k]"
            if el.attr('type') is 'checkbox'
                el.attr 'checked', if v then 'checked' else ''
            else
                el.val txt
            
            form.find "textarea[name=#k]" .text txt
        this
    
    
    render: ->
        return this unless @ready
        @renderDetails()
        
        dataset = @model.get 'dataset'
        size    = @resizeViewport()
        
        # XXX: use @model.changedAttributes() to calculate what to update
        options = @chartOptions() #import size
        options import do
            labelsDiv          : @$el.find '.graph-label' .0
            valueFormatter     : @numberFormatter
            axes:
                x:
                    axisLabelFormatter : @axisDateFormatter
                    valueFormatter     : @dateFormatter
                y:
                    axisLabelFormatter : @axisFormatter @numberFormatter
                    valueFormatter     : @numberFormatter
        
        # console.log "#this.render!", dataset
        _.dump options, 'options'
        
        # Always rerender the chart to sidestep the case where we need to push defaults into
        # dygraphs to reset the current option state.
        @chart?.destroy()
        @chart = new Dygraph do
            @viewport.0
            dataset
            options
        # unless @chart
        #     @chart = new Dygraph do
        #         @viewport.0
        #         dataset
        #         options
        # else
        #     @chart.updateOptions options
        #     @chart.resize size
        
        @updateURL()
        @trigger 'render', this
        this
    
    renderAll: ->
        return this unless @ready
        # console.log "#this.renderAll!"
        _.invoke @scaffold.subviews, 'render'
        @scaffold.render()
        @render()
        this
    
    /**
     * Update the page URL using HTML5 History API
     */
    updateURL: ->
        data  = @toJSON()
        title = @model.get('name', root.document?.title or '')
        url   = @toURL()
        # console.log 'History.pushState', JSON.stringify(data), title, url
        History.pushState data, title, url
    
    
    
    ### Formatters {{{
    
    axisFormatter: (fmttr) ->
        (n, granularity, opts, g) -> fmttr n, opts, g
    
    axisDateFormatter: (n, granularity, opts, g) ->
        moment(n).format 'MM/YYYY'
    
    dateFormatter: (n, opts, g) ->
        moment(n).format 'DD MMM YYYY'
    
    numberFormatter: (n, opts, g) ->
        digits = opts('digitsAfterDecimal') ? 2
        for [suffix, d] of [['B', 1000000000], ['M', 1000000], ['K', 1000], ['', NaN]]
            if n >= d
                n = n / d
                break
        s = n.toFixed(digits) + suffix
        parts = s.split '.'
        parts[0] = _.rchop parts[0], 3 .join ','
        parts.join '.'
    
    ### }}}
    ### Event Handlers {{{
    
    onReady: ->
        console.log "(#this via GraphEditView).ready!"
        @ready = @scaffold.ready = true
        @onSync()
    
    onSync: ->
        return unless @ready
        console.info "#this.sync() --> success!"
        # TODO: UI alert
        # @change()
        # @model.change()
        @chartOptions @model.getOptions(), {+silent}
        @renderAll()
    
    onModelChange: ->
        changes = @model.changedAttributes()
        options = @model.getOptions()
        # console.log "Graph.changed( options ) ->\n\tchanges: #{JSON.stringify changes}\n\toptions: #{JSON.stringify options}" #"\n\t^opts: #{JSON.stringify _.intersection _.keys(changes), _.keys(options)}"
        @chart.updateOptions file:that if changes?.dataset
        @chartOptions options, {+silent} if changes?.options
    
    onScaffoldChange: (scaffold, value, key, field) ->
        current = @model.getOption(key)
        # console.log do
        #     "scaffold.change! #key:"
        #     current
        #     '-->'
        #     value
        #     " ( isDefault?"
        #     (current is void and field.isDefault())
        #     "isEqual?"
        #     _.isEqual(value, current)
        #     ")   --> "
        #     unless _.isEqual(value, current) or (current is void and field.isDefault()) then 'CHANGE' else 'SQUELCH'
        
        unless _.isEqual(value, current) or (current is void and field.isDefault())
            @model.setOption(key, value, {+silent})
    
    onFirstClickRenderOptionsTab: ->
        @$el.off 'click', '.graph-options-tab', @onFirstClickRenderOptionsTab
        @scaffold.render()
    
    onKeypress: (evt) ->
        $(evt.target).submit() if evt.keyCode is 13
    
    onDetailsSubmit: ->
        console.log "#this.onDetailsSubmit!"
        data = _.synthesize do
            @$el.find('form.details').serializeArray()
            -> [it.name, it.value]
        @model.set data
        false
    
    onOptionsSubmit: ->
        console.log "#this.onOptionsSubmit!"
        @render()
        false
    
    # }}}
    
    toString: -> "#{@ctorName}(#{@model})"
# }}}

