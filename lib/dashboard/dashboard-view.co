Seq = require 'seq'

{ _, op,
} = require 'kraken/util'
{ BaseView,
} = require 'kraken/base'
{ Graph, GraphList, GraphDisplayView,
} = require 'kraken/graph'
{ Dashboard,
} = require 'kraken/dashboard/dashboard-model'


/**
 * @class
 */
DashboardView = exports.DashboardView = BaseView.extend do # {{{
    __bind__       : <[  ]>
    tagName        : 'section'
    className      : 'dashboard'
    template       : require 'kraken/template/dashboard'
    
    graph_ids : <[
        unique_visitors
        reach
        pageviews
        pageviews_mobile
        pageviews_mobile_target        
        commons
        articles
        articles_per_day
        edits
        new_editors
        active_editors
        active_editors_target
        very_active_editors
    ]>

    core_tab :
        graph_ids : <[
        unique_visitors
        pageviews
        pageviews_mobile
        pageviews_mobile_target        
        new_editors
        active_editors
        active_editors_target
    ]>
        name: ".core-graphs-pane"

    other_tab :
        graph_ids : <[
        reach
        commons
        articles
        articles_per_day
        edits
        very_active_editors
    ]>
        name: ".other-graphs-pane"

    dev_tab :
        graph_ids : <[
        mobile_devices
        mobile_devices_browsers
        mobile_devices_applications
    ]>
        name: ".dev-graphs-pane"
    
    events:
        # Select the whole permalink URI text when it receives focus.        
        # 'click      a[data-target="#other-graphs"]'             : 'tab_shown'
        'click .graphs.tabbable .nav a' : 'onTabClick'
        'shown .graphs.tabbable .nav a' : 'tab_shown'
        #     'click    .load-button'                    : 'load'

    subviews : []
    graphs   : null
    ready    : false
    
    
    constructor: function DashboardView
        @subviews = []
        @graphs   = new GraphList
        Backbone.View ...
    
    initialize: ->
        @model or= new Dashboard
        BaseView::initialize ...
        # @graphs.on 'add', @attachGraphs, this
        # @graphs.on 'add', @attachGraph, this
        @load()
    

    load: ->
        @addTab(@core_tab)
        @addTab(@other_tab)
        @addTab(@dev_tab)

    addTab: (tab) ->
        self = this        
        Seq(tab.graph_ids)
            .parMap (id) ->
                Graph.lookup id, this
            .parMap (graph) ->
                self.graphs.add graph
                this null, new GraphDisplayView {model:graph}
            .parMap (view) ->                
                return if view.isAttached     
                graphs_el = self.$el.find tab.name
                graphs_el.append view.el 
                self.subviews.push view
                view.isAttached = true

    tab_shown: (e) ->        
        console.log 'tab_shown!', e
        Seq(@subviews)
            .parMap (view) ->
                # view.resizeViewport()
                view.renderChart()
    
    onTabClick: (evt) ->
        evt.preventDefault()


