_    = require 'kraken/underscore'
op   = require 'kraken/util/op'



### Scaffold Models

Field = exports.Field = Backbone.Model.extend do # {{{
    ctorName    : 'Field'
    idAttribute : 'name'
    
    
    initialize: ->
        @set 'value', @get('default'), {+silent} if not @has 'value'
        # console.log "#this.initialize!"
        @on 'all', (evt) ~> console.log "#this.trigger(#evt)"
    
    # Model defaults
    defaults: ->
        {
            name     : ''
            type     : 'String'
            default  : null
            desc     : ''
            include  : 'diff'
            tags     : []
            examples : []
        }
    
    
    /* * *  Parsers  * * */
    
    getParser: (type) ->
        # XXX: handle 'or' by returning an array of parsers?
        type = _ (type or @get 'type').toLowerCase()
        for t of <[ Integer Float Boolean Object Array Function ]>
            if type.startsWith t.toLowerCase()
                console.log "parse#t ->", @["parse#t"] unless @["parse#t"]
                return @["parse#t"]
        @parseString
    
    parseString: (v) ->
        if v? then op.toStr v else null
    
    parseInteger: (v) ->
        r = op.toInt v
        unless isNaN r then r else null
    
    parseFloat: (v) ->
        r = op.toFloat v
        unless isNaN r then r else null
    
    parseBoolean: (v) ->
        op.toBool v
    
    parseArray: (v) ->
        if v then op.toObject v else null
    
    parseObject: (v) ->
        if v then op.toObject v else null
    
    parseFunction: (fn) ->
        if fn and _.startswith String(fn), 'function'
            try eval "(#fn)" catch err
        else
            null
    
    
    /* * * Serializers * * */
    serializeValue: ->
        v = @getValue()
        if v!?
            v = ''
        else if _.isArray(v) or _.isObject(v)
            v = JSON.stringify v
        String v
    
    
    /* * * Value Accessors * * */
    getValue: (def) ->
        @getParser() @get 'value', def
    
    setValue: (v, options) ->
        def = @get 'default'
        if not v and def == null
            val = null
        else
            val = @getParser()(v)
        @set 'value', val, options
    
    clearValue: ->
        @set 'value', @get('default')
    
    isDefault: ->
        @get('value') is @get('default')
    
    
    toJSON: ->
        {id:@id} import do
            _.clone(@attributes) import { value:@getValue(), def:@get('default') }
    
    toKVPairs: ->
        key   = @get 'name'
        value = @get 'value'
        if value?
            "#{encodeURIComponent key}=#{encodeURIComponent value}"
        else
            ''
    
    toString: -> "(#{@id}: #{@get 'value'})"
# }}}


FieldList = exports.FieldList = Backbone.Collection.extend do # {{{
    ctorName : 'FieldList'
    model : Field
    
    /**
     * Collects a map of fields to their values, excluding those set to `null` or their default.
     * @returns {Object}
     */
    values: ->
        _.synthesize do
            @models.filter -> not it.isDefault()
            -> [ it.get('name'), it.getValue() ]
    
    toJSON: ->
        @values()
    
    toKVPairs: ->
        @models
            .filter -> it.get('name') and it.getValue()?
            .map -> "#{encodeURIComponent it.id}=#{encodeURIComponent it.get 'value'}"
            .join '&'
    
    toString: -> "#{@ctorName}(length=#{@length})"
# }}}

