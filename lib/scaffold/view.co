_  = require 'kraken/underscore'
op = require 'kraken/util/op'
{ Field, FieldList,
}  = require 'kraken/scaffold/model'


### Views

BaseView = exports.BaseView = Backbone.View.extend do # {{{
    # List of methods to bind on initialize; set on subclass
    __bind__ : []
    
    
    initialize: ->
        _.bindAll this, ...@__bind__ if @__bind__.length
        @__super__ = @constructor.__super__
        
        @model.view = this
        @$el.data { @model, view:this }
        @model.on 'change',  @render, this
        @model.on 'destroy', @remove, this
    
    
    toTemplateLocals: ->
        { $, _, op, @model, view:this } import @model.toJSON()
    
    $template: (locals={}) ->
        $ @template @toTemplateLocals() import locals
    
    build: ->
        return this unless @template
        
        outer = @$template()
        @$el.html outer.html()
            .attr do
                id    : outer.attr 'id'
                class : outer.attr('class')
        
        # @$parent = p if (p = @$el.parent()).length
        this
    
    render: ->
        @build()
        @trigger 'render', this
        this
    
    hide   : -> @$el.hide();      this
    show   : -> @$el.show();      this
    remove : -> @$el.remove();    this
    clear  : -> @model.destroy(); @remove()
    
    
    # remove : ->
    #     if (p = @$el.parent()).length
    #         @$parent or= p
    #         # @parent_index = p.children().indexOf @$el
    #     @$el.remove()
    #     this
    # 
    # reparent : (parent=@$parent) ->
    #     parent = $ parent
    #     @$el.appendTo parent if parent?.length
    #     this
    
    toString : -> "#{@ctorName}(model=#{@model})"


# }}}



FieldView = exports.FieldView = BaseView.extend do # {{{
    tagName   : 'div'
    className : 'field'
    
    events :
        'blur .value'   : 'onUIChange'
        'submit .value' : 'onUIChange'
    
    
    initialize: ->
        # console.log "#this.initialize!"
        BaseView::initialize ...
    
    onUIChange: ->
        val     = @$el.find('.value').val()
        current = @model.get 'value'
        return if val is current
        # console.log "#this.onUIChange( #current -> #val )"
        @model.setValue val, {+silent}
    
    render: ->
        return @remove() if @model.get 'hidden', false
        return BaseView::render ... if @template
        
        name  = @model.get 'name'
        id    = _.camelize name
        label = name
        value = @model.get 'value'
        value = '' if value!?
        
        @$el.html """
            <label class="name" for="#id">#label</label>
            <input class="value" type="text" id="#id" name="#id" value="#value">
        """
        
        this
    
# }}}


# There are several special options that, if passed, will be attached directly to the view:
#   model, collection, el, id, className, tagName, attributes

Scaffold = exports.Scaffold = BaseView.extend do # {{{
    __bind__       : <[ addOne addAll ]>
    tagName        : 'form'
    className      : 'scaffold'
    
    collectionType : FieldList
    subviewType    : FieldView
    
    
    initialize: ->
        @subviews = []
        CollectionType = @collectionType
        @model = @collection or= new CollectionType
        
        BaseView::initialize ...
        
        @collection.on 'add',   @addOne
        @collection.on 'reset', @addAll
        
        @$el.data { model:@collection, view:this } .addClass @className
    
    
    addOne: (field) ->
        # console.log "[S] #this.addOne!", @__super__
        _.remove @subviews, field.view if field.view
        
        SubviewType = @subviewType
        view = new SubviewType model:field
        @subviews.push view
        @$el.append view.render().el unless field.get 'hidden'
        
        @render()
        view
    
    addAll: ->
        # _.invoke @subviews, 'remove'
        # @subviews = []
        @collection.each @addOne
        this
    
    get: (id) ->
        @collection.get id
    
    at: (idx) ->
        @collection.at idx
    
    pluck: (prop) ->
        @collection.pluck prop
    
    values: ->
        @collection.values()
    
    toString: -> "#{@ctorName}(collection=#{@collection})"
# }}}

