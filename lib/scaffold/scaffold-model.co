_  = require 'kraken/underscore'
op = require 'kraken/util/op'
{ BaseModel, BaseList,
}  = require 'kraken/base'



### Scaffold Models

Field = exports.Field = BaseModel.extend do # {{{
    ctorName       : 'Field'
    idAttribute    : 'name'
    valueAttribute : 'value'
    
    
    initialize: ->
        _.bindAll this, ...(_.functions this .filter -> _.startsWith(it, 'parse'))
        @set 'value', @get('default'), {+silent} if not @has 'value'
        # console.log "#this.initialize!"
        # @on 'all', (evt) ~> console.log "#this.trigger(#evt)"
    
    # Model defaults
    defaults: ->
        {
            name     : ''
            type     : 'String'
            default  : null
            desc     : ''
            include  : 'diff'
            tags     : []
            examples : []
        }
    
    
    /* * *  Parsers  * * */
    
    getParser: (type) ->
        # XXX: handle 'or' by returning an array of parsers?
        type = _ (type or @get 'type').toLowerCase()
        for t of <[ Integer Float Boolean Object Array Function ]>
            if type.startsWith t.toLowerCase()
                return @["parse#t"]
        @parseString
    
    parseString: (v) ->
        if v? then op.toStr v else null
    
    parseInteger: (v) ->
        r = op.toInt v
        unless isNaN r then r else null
    
    parseFloat: (v) ->
        r = op.toFloat v
        unless isNaN r then r else null
    
    parseBoolean: (v) ->
        op.toBool v
    
    parseArray: (v) ->
        if v then op.toObject v else null
    
    parseObject: (v) ->
        if v then op.toObject v else null
    
    parseFunction: (fn) ->
        if fn and _.startswith String(fn), 'function'
            try eval "(#fn)" catch err then null
        else
            null
    
    
    /* * * Value Accessors * * */
    getValue: (def) ->
        @getParser() @get @valueAttribute, def
    
    setValue: (v, options) ->
        def = @get 'default'
        if not v and def == null
            val = null
        else
            val = @getParser()(v)
        @set @valueAttribute, val, options
    
    clearValue: ->
        @set @valueAttribute, @get('default')
    
    isDefault: ->
        @get(@valueAttribute) is @get('default')
    
    
    /* * * Serializers * * */
    serializeValue: ->
        @serialize @getValue()
    
    toJSON: ->
        {id:@id} import do
            _.clone(@attributes) import { value:@getValue(), def:@get('default') }
    
    toKVObject: ->
        { "#{@id}":@serializeValue() }
    
    toString: -> "(#{@id}: #{@serializeValue()})"
# }}}


FieldList = exports.FieldList = BaseList.extend do # {{{
    ctorName : 'FieldList'
    model    : Field
    
    /**
     * Collects a map of fields to their values, excluding those set to `null` or their default.
     * @returns {Object}
     */
    values: (opts={}) ->
        opts = {-keepDefaults, -serialize} import opts
        _.synthesize do
            if opts.keepDefaults then @models else @models.filter -> not it.isDefault()
            -> [ it.get('name'), if opts.serialize then it.serializeValue() else it.getValue() ]
    
    toJSON: ->
        @values()
    
    toKVObject: ->
        _.collapseObject @values false, true
    
    toKVPairs: (item_delim='&', kv_delim='=') ->
        _.toKVPairs @toKVObject(), item_delim, kv_delim
    
    toString: -> "#{@ctorName}(length=#{@length})"
# }}}

