_  = require 'kraken/util/underscore'
op = require 'kraken/util/op'
{ BaseView,
}  = require 'kraken/base'
{ Field, FieldList,
}  = require 'kraken/scaffold/scaffold-model'


FieldView = exports.FieldView = BaseView.extend do # {{{
    tagName   : 'div'
    className : 'field'
    
    type : 'string'
    
    events :
        'blur .value'   : 'change'
        'submit .value' : 'change'
    
    
    constructor: function FieldView
        BaseView ...
    
    initialize: ->
        # console.log "#this.initialize!"
        BaseView::initialize ...
        @type = @model.get('type').toLowerCase() or 'string'
    
    toTemplateLocals: ->
        json = {value:v} = @model.toJSON()
        if _.isArray(v) or _.isPlainObject(v)
            json.value = JSON.stringify v
        json
    
    change: ->
        if @type is 'boolean'
            val = !! @$('.value').attr('checked')
        else
            val = @model.getParser() @$('.value').val()
        
        current = @model.getValue()
        return if _.isEqual val, current
        console.log "#this.change( #current -> #val )"
        @model.setValue val, {+silent}
        @trigger 'change', this
    
    render: ->
        return @remove() if @model.get 'ignore', false
        return BaseView::render ... if @template
        
        name  = @model.get 'name'
        id    = _.camelize name
        label = name
        value = @model.get 'value'
        value = '' if value!?
        
        @$el.html """
            <label class="name" for="#id">#label</label>
            <input class="value" type="text" id="#id" name="#id" value="#value">
        """
        
        this
    
# }}}


# There are several special options that, if passed, will be attached directly to the view:
#   model, collection, el, id, className, tagName, attributes

Scaffold = exports.Scaffold = BaseView.extend do # {{{
    __bind__       : <[ addField resetFields ]>
    tagName        : 'form'
    className      : 'scaffold'
    
    collectionType : FieldList
    subviewType    : FieldView
    
    
    constructor: function Scaffold
        @_subviews = []
        BaseView ...
    
    initialize: ->
        CollectionType = @collectionType
        @model = (@collection or= new CollectionType)
        BaseView::initialize ...
        
        @collection.on 'add',   @addField, this
        @collection.on 'reset', @resetFields, this
        
        @$el.data { model:@collection, view:this } .addClass @className
    
    
    addField: (field) ->
        @removeSubview field.view if field.view
        
        # avoid duplicating event propagation
        field.off 'change:value', @change, this
        
        # propagate value-change events as key-value change events
        field.on 'change:value', @change, this
        
        SubviewType = @subviewType
        view = @addSubview new SubviewType model:field
        view.on 'change', @change.bind(this, field)
        
        @render()
        view
    
    resetFields: ->
        @removeAllSubviews()
        @collection.each @addField
        this
    
    change: (field) ->
        key   = field.get 'name'
        value = field.getValue()
        @trigger "change:#key", this, value, key, field
        @trigger "change",      this, value, key, field
        this
    
    



# Proxy collection methods
<[ get at pluck invoke values toJSON toKVPairs toKV toURL ]>
    .forEach (methodname) ->
        Scaffold::[methodname] = -> @collection[methodname].apply @collection, arguments

# }}}

