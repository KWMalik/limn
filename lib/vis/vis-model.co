_ = require 'kraken/underscore'
{ BaseModel, BaseView,
} = require 'kraken/base'

root = do -> this


/**
 * Represents a Graph, including its charting options, dataset, annotations, and all
 * other settings for both its content and presentation.
 */
VisModel = exports.VisModel = BaseModel.extend do # {{{
    IGNORE_OPTIONS : <[ width height timingName ]>
    ctorName    : 'VisModel'
    urlRoot     : '/graph'
    idAttribute : 'slug'
    
    
    
    initialize : ->
        BaseModel::initialize ...
        name = @get 'name'
        if name and not @get 'slug', @id
            @set 'slug', _.underscored name
    
    
    defaults: ->
        ({
            slug    : ''
            name    : ''
            desc    : ''
            dataset : '/data/non_mobile_pageviews_by.timestamp.language.csv'
            # presets : []
            width   : 'auto'
            height  : 320
        } import root.ROOT_VIS_DATA) import { options:_.clone root.ROOT_VIS_OPTIONS }
    
    
    parse: (data) ->
        data = JSON.parse data if typeof data is 'string'
        for k, v in data
            data[k] = Number v if _.contains(<[ width height ]>, k) and v is not 'auto'
        data
    
    set: (values, opts) ->
        if arguments.length > 1 and typeof values is 'string'
            [k, v, opts] = arguments
            values = { "#k": v }
        BaseModel::set.call this, @parse(values), opts
    
    
    ### Chart Option Accessors ###
    
    hasOption: (key) ->
        options = @get 'options', {}
        options[key]?
    
    getOption: (key, def) ->
        @get('options', {})[key] ? def
    
    setOption: (key, value, opts={}) ->
        options = @get 'options', {}
        unless _.contains @IGNORE_OPTIONS, key
            options[key] = value
            @set 'options', options, opts
            @trigger "change:options:#key", this, value, key, opts unless opts.silent
        this
    
    unsetOption: (key, opts={}) ->
        options = @get 'options', {}
        delete options[key]
        @set 'options', options, opts
        @trigger "change:options:#key", this, value, key, opts unless opts.silent
        this
    
    
    ### URL Serialization
    
    toJSON: (options={}) ->
        options = {+keepDefaults} import options
        
        json = _.clone(@attributes) import { options:_.clone(@attributes.options) }
        return json if options.keepDefaults
        
        dyglib = ChartLibrary.lookupLibrary 'dygraphs'
        opts = json.options
        for k, v in opts
            delete opts[k] if dyglib.isDefault k, v
        json
    
    
    toKVPairs: (keepSlug=false) ->
        kvo = @toJSON()
        delete kvo.slug unless keepSlug
        # console.group 'toKVPairs'
        # console.log '[IN]', JSON.stringify kvo
        opts = kvo.options = _.clone kvo.options
        for k, rootVal in root.ROOT_VIS_OPTIONS
            v = opts[k]
            # console.log "  [#k] rootVal:", rootVal, "===", v, "?", _.isEqual(rootVal, v) unless _.isEqual(rootVal, v)
            if v is void or _.isEqual rootVal, v
                delete opts[k]
            else
                opts[k] = @serialize v
        # console.log '[OUT]', JSON.stringify kvo
        # console.groupEnd()
        _.collapseObject kvo
    
    toKV: (keepSlug=false) ->
        _.toKV @toKVPairs keepSlug
    
    
    /**
     * @returns {String} URL identifying this model.
     */
    toURL: ->
        slug = @get 'slug', ''
        slug = "/#slug" if slug
        "/graph#slug?#{@toKV(false)}"
    
    toString: -> "#{@ctorName}(id=#{@id})"

# }}}


