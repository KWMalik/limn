_ = require 'kraken/underscore'
{ BaseModel, BaseView,
} = require 'kraken/base'

root = do -> this


/**
 * Represents a Graph, including its charting options, dataset, annotations, and all
 * other settings for both its content and presentation.
 */
VisModel = exports.VisModel = BaseModel.extend do # {{{
    ctorName    : 'VisModel'
    urlRoot     : '/graph'
    idAttribute : 'slug'
    
    
    initialize : ->
        BaseModel::initialize ...
        name = @get 'name'
        if name and not @get 'slug', @id
            @set 'slug', _.underscored name
    
    
    defaults: ->
        {
            slug    : ''
            name    : ''
            desc    : ''
            dataset : '/data/pageviews_by.timestamp.mobile.csv'
            # presets : []
            width   : 'auto'
            height  : 320
            options : {} import root.ROOT_VIS_OPTIONS
        } import root.ROOT_VIS_DATA
    
    
    parse: (data) ->
        data = JSON.parse data if typeof data is 'string'
        for k, v in data
            data[k] = Number v if _.contains(<[ width height ]>, k) and v is not 'auto'
        data
    
    set: (values, opts) ->
        if arguments.length > 1 and typeof values is 'string'
            [k, v, opts] = arguments
            values = { "#k": v }
        BaseModel::set.call this, @parse(values), opts
    
    
    ### Chart Option Accessors ###
    
    hasOption: (key) ->
        options = @get 'options', {}
        options[key]?
    
    getOption: (key, def) ->
        @get('options', {})[key] ? def
    
    setOption: (key, value, opts={}) ->
        options = @get 'options', {}
        options[key] = value
        @set 'options', options, opts
        @trigger "change:options:#key", this, value, key, opts unless opts.silent
    
    unsetOption: (key, opts={}) ->
        options = @get 'options', {}
        delete options[key]
        @set 'options', options, opts
        @trigger "change:options:#key", this, value, key, opts unless opts.silent
    
    
    
    toString: -> "#{@ctorName}(id=#{@id}, name=#{@get 'name'}, dataset=#{@get 'dataset'})"

# }}}


