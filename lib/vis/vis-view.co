root = do -> this

_ = require 'kraken/underscore'
{ BaseView,
} = require 'kraken/base'
{ Field, FieldList, FieldView, Scaffold
} = require 'kraken/scaffold'
{   GraphOptionsScaffold, GraphOption, GraphOptionList, DEBOUNCE_RENDER,
} = require 'kraken/graph'
{ VisModel,
} = require 'kraken/vis/vis-model'





/**
 * View for a graph visualization encapsulating the UI for:
 * - Graph metadata, such as name, description, slug
 */
VisView = exports.VisView = BaseView.extend do # {{{
    __bind__  : <[ resizeViewport render renderAll onReady formatter axisFormatter ]>
    ctorName  : 'VisView'
    tagName   : 'section'
    className : 'graph'
    template  : require 'kraken/template/graph'
    
    events:
        'keypress form.details input[type="text"]' : 'onKeypress'
        'keypress form.options .value'             : 'onKeypress'
        'submit   form.details'                    : 'onDetailsSubmit'
        'submit   form.options'                    : 'onOptionsSubmit'
        'change   input[type="checkbox"]'          : 'onOptionsSubmit'
    
    ready: false
    
    
    
    initialize : (o={}) ->
        @model or= new VisModel
        BaseView::initialize ...
        # console.log "#this.initialize!"
        
        for name of <[ resizeViewport render renderAll ]>
            @[name] = _.debounce @[name], DEBOUNCE_RENDER
        
        # Resize graph on window resize
        $ root .on 'resize', @resizeViewport
        
        @id = _.domize 'graph', (@model.id or @model.cid)
        
        @model.on 'destroy', @remove, this
        @model.on 'change',  @render, this
        @model.on 'change:dataset', ~>
            changes = @model.changedAttributes()
            console.log 'VisModel.changed(dataset) ->', JSON.stringify changes
            @chart.updateOptions file:that if changes?.dataset
        @model.on 'change:options', ~>
            changes = @model.changedAttributes()
            console.log 'VisModel.changed(options) ->', JSON.stringify changes
            @chartOptions that, {+silent} if changes?.options
        
        @viewport = @$el.find '.viewport'
        
        @scaffold = new GraphOptionsScaffold
        @$el.find '.graph-options-pane' .append @scaffold.el
        @scaffold.collection.reset that if o.graph_spec
        
        @scaffold.on 'change', (scaffold, value, key, field) ~>
            # console.log "scaffold.change!", value, key, field
            @model.setOption key, value, {+silent} unless field.isDefault()
        
        options = @model.get 'options', {}
        @chartOptions options, {+silent}
        
        @resizeViewport()
        _.delay @onReady, DEBOUNCE_RENDER
    
    
    onReady: ->
        console.log "#this.ready!"
        @ready = @scaffold.ready = true
        @change()
        @renderAll()
    
    change: ->
        @model.change()
        @scaffold.invoke 'change'
        this
    
    
    chartOptions: (values, opts) ->
        # Handle @chartOptions(k, v, opts)
        if arguments.length > 1 and typeof values is 'string'
            [k, v, opts] = arguments
            values = { "#k": v }
        
        options = @scaffold.collection
        if values
            for k, v in values
                options.get(k)?.setValue v, opts
            this
        else
            options.values() # TODO: pull this from model (must clone), sort out events
    
    
    /**
     * Resizes chart according to the model's width and height.
     * @return { width, height }
     */
    resizeViewport: ->
        return this unless @ready
        
        # Remove old style, as it confuses dygraph after options update
        @viewport.attr 'style', ''
        label = @$el.find '.graph-label'
        
        if (width = @model.get 'width')  is 'auto'
            vpWidth = @viewport.innerWidth()
            labelW = label.outerWidth()
            width = vpWidth - labelW - 10 - (vpWidth - label.position().left - labelW)
        if (height = @model.get 'height') is 'auto'
            height = @viewport.innerHeight()
        size = { width, height }
        @viewport.css size
        # console.log 'resizeViewport!', JSON.stringify(size), @viewport
        # @chart.resize size if forceRedraw
        size
    
    
    
    axisFormatter: (n, granularity, opts, g) ->
        @formatter n, opts, g
    
    formatter: (n, opts, g) ->
        return n if n instanceof Date
        sigFigs = opts 'sigFigs'
        maxW    = opts 'maxNumberWidth'
        digits  = opts 'digitsAfterDecimal'
        v = Dygraph.round_ n, digits
        # Dygraph.floatFormat n, sigFigs
        # console.log n, "->", v, "?= %#{maxW}.#{digits}g (sigFigs=#sigFigs)"
        v
    
    
    render: ->
        return this unless @ready
        console.log "#this.render!"
        
        size = @resizeViewport()
        options = @chartOptions() import size
        options import do
            labelsDiv          : @$el.find '.graph-label' .0
            # axisLabelFormatter : @axisFormatter
            # valueFormatter     : @formatter
        
        # @chart?.destroy()
        unless @chart
            @chart = new Dygraph do
                @viewport.0
                @model.get 'dataset'
                options
        else
            @chart.updateOptions options
            @chart.resize size
        
        # path = String(root.location?.path or '/')
        data  = @toJSON()
        title = @model.get('name', root.document?.title or '')
        url   = "?"+@toKVPairs()
        # console.log 'History.pushState', JSON.stringify(data), title, url
        History.pushState data, title, url
        
        this
    
    renderAll: ->
        return this unless @ready
        console.log "#this.renderAll!"
        _.invoke @scaffold.subviews, 'render'
        @scaffold.render()
        @render()
        this
    
    onKeypress: (evt) ->
        $(evt.target).submit() if evt.keyCode is 13
    
    onDetailsSubmit: ->
        console.log "#this.onDetailsSubmit!"
        data = _.synthesize do
            @$el.find('form.details').serializeArray()
            -> [it.name, it.value]
        @model.set data
        false
    
    onOptionsSubmit: ->
        console.log "#this.onOptionsSubmit!"
        @render()
        false
    
    toJSON: ->
        @model.toJSON()
    
    toKVPairs: ->
        @model.toKVPairs.apply @model, arguments
    
    toString: -> "#{@ctorName}(#{@model})"
# }}}

